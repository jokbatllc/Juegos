from __future__ import annotations

import csv
from pathlib import Path

from django.core.management.base import BaseCommand, CommandError

from ...models import Word

LANG_CODES = {"es", "en", "fr", "de"}

DATASET_DIR = Path(__file__).resolve().parents[3] / "lexicon" / "datasets"


class Command(BaseCommand):
    """Import words from CSV files into the :class:`Word` model."""

    help = "Import CSV datasets generated by scripts/generate_dataset.py"

    def add_arguments(self, parser) -> None:  # pragma: no cover - simple
        parser.add_argument(
            "--file",
            help="Import a specific CSV file instead of the bundled samples",
        )

    def handle(self, *args, **options):
        csv_path = options.get("file")
        if csv_path:
            files = [Path(csv_path)]
            if not Path(csv_path).exists():
                raise CommandError(f"File not found: {csv_path}")
        else:
            if not DATASET_DIR.exists():
                self.stderr.write(f"No dataset directory found at {DATASET_DIR}")
                return
            files = sorted(DATASET_DIR.glob("*_sample.csv"))
            if not files:
                self.stderr.write("No sample datasets found")
                return

        totals: dict[str, int] = {}

        for csv_file in files:
            prefix = csv_file.stem.split("_")[0]
            lang = prefix if prefix in LANG_CODES else None
            with csv_file.open(encoding="utf-8") as fh:
                reader = csv.DictReader(fh)
                for row in reader:
                    word = row.get("word", "").strip()
                    if not word:
                        continue
                    language = row.get("language") or lang
                    if language not in LANG_CODES:
                        continue
                    _, created = Word.objects.get_or_create(
                        word=word, defaults={"language": language}
                    )
                    if created:
                        totals[language] = totals.get(language, 0) + 1

        for code, count in sorted(totals.items()):
            self.stdout.write(f"{code}: {count} imported")
        self.stdout.write(self.style.SUCCESS("Import completed"))
