 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/.env.example b/.env.example
new file mode 100644
index 0000000000000000000000000000000000000000..6a7d6f4098a549c150827a0d6d3566d98e14c998
--- /dev/null
+++ b/.env.example
@@ -0,0 +1,11 @@
+DJANGO_SETTINGS_MODULE=juegos.settings
+DJANGO_SECRET_KEY=changeme-in-prod
+DJANGO_DEBUG=1
+DJANGO_ALLOWED_HOSTS=*
+DB_NAME=juegos
+DB_USER=juegos
+DB_PASSWORD=juegos
+DB_HOST=db
+DB_PORT=5432
+TIME_ZONE=Europe/Madrid
+LANGUAGE_CODE=es-es
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..a261ce0799256a2170076ddd2fe9ea8643ca54ec
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,49 @@
+# Python / venv
+__pycache__/
+*.py[cod]
+*.log
+.venv/
+venv/
+.env
+.env.*
+
+# Django artifacts
+db.sqlite3
+media/
+!media/.gitkeep
+staticfiles/
+.DS_Store
+
+# Exports and datasets
+exports/
+lexicon/datasets/*
+!lexicon/datasets/*_sample.csv
+lexicon/datasets/auto_*.csv
+
+# Other generated data
+lexicon/fixtures/*.json
+lexicon/fixtures/*.jsonl
+dumps/*.json
+dumps/*.jsonl
+
+# IDEs and editors
+.vscode/
+.idea/
+*.swp
+*.swo
+
+# Python packaging
+*.egg-info/
+build/
+dist/
+
+# Compressed / binary files
+*.zip
+*.tar
+*.tar.gz
+*.7z
+*.pdf
+*.png
+*.jpg
+*.jpeg
+*.webp
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
new file mode 100644
index 0000000000000000000000000000000000000000..3e6ae881361211270faf38c4202d77cc49fb8098
--- /dev/null
+++ b/.pre-commit-config.yaml
@@ -0,0 +1,13 @@
+repos:
+  - repo: https://github.com/charliermarsh/ruff-pre-commit
+    rev: v0.5.4
+    hooks:
+      - id: ruff
+  - repo: https://github.com/psf/black
+    rev: 23.9.1
+    hooks:
+      - id: black
+  - repo: https://github.com/PyCQA/isort
+    rev: 5.12.0
+    hooks:
+      - id: isort
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000000000000000000000000000000000000..433cbb42624468ede25347c68107538a7781ab4a
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,36 @@
+# syntax=docker/dockerfile:1
+
+FROM python:3.11-slim AS builder
+ENV PYTHONDONTWRITEBYTECODE=1 \
+    PYTHONUNBUFFERED=1
+WORKDIR /app
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    build-essential \
+    libpq-dev \
+    libffi-dev \
+    libpango-1.0-0 \
+    libcairo2 \
+    libjpeg62-turbo-dev \
+    libpng-dev \
+    && rm -rf /var/lib/apt/lists/*
+COPY requirements.txt .
+RUN pip install --no-cache-dir --prefix=/install -r requirements.txt
+
+FROM python:3.11-slim AS final
+ENV PYTHONDONTWRITEBYTECODE=1 \
+    PYTHONUNBUFFERED=1
+WORKDIR /app
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    libpq-dev \
+    libffi-dev \
+    libpango-1.0-0 \
+    libcairo2 \
+    libjpeg62-turbo \
+    libpng16-16 \
+    && rm -rf /var/lib/apt/lists/*
+COPY --from=builder /install /usr/local
+COPY . .
+COPY docker/entrypoint.sh /entrypoint.sh
+RUN chmod +x /entrypoint.sh
+EXPOSE 8000
+ENTRYPOINT ["/entrypoint.sh"]
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000000000000000000000000000000000000..2fe51f1f7d570cc84c7ccfb5375fd2eff7f75844
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,34 @@
+lint:
+	ruff check . --fix
+	isort .
+	black .
+
+test:
+	pytest -q
+
+run:
+	python manage.py runserver
+
+seed:
+	python manage.py seed_lexicon --per-lang 200 --langs es,en,fr
+
+users:
+	python manage.py setup_roles && python manage.py create_demo_users
+
+up:
+	docker compose --env-file .env up --build
+
+up-prod:
+	docker compose -f docker-compose.prod.yml --env-file .env up --build -d
+
+down:
+	docker compose down
+
+migrate:
+	docker compose exec web python manage.py migrate
+
+createsuperuser:
+	docker compose exec web python manage.py createsuperuser
+
+shell:
+	docker compose exec web python manage.py shell
diff --git a/README.md b/README.md
index b0c39952264cccfa8898bdc4b003fb8f5736aa44..3f181b6706c821964ca3fbf2e5670d113e2192cf 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,130 @@
 # Juegos
-Proyecto Django para crucigramas, sopas de letras, etc.
+
+Proyecto Django para generar y exportar crucigramas, sopas de letras, sudokus, dibujos para colorear, cuadernos de caligrafía y mandalas. Incluye un Lexicon para gestionar palabras y categorías.
+
+## Instalación
+
+1. Crear y activar un entorno virtual:
+   `python -m venv venv && source venv/bin/activate`
+2. Instalar dependencias:
+   `pip install -r requirements.txt`
+3. Ejecutar migraciones:
+   `python manage.py migrate`
+4. Generar datos iniciales del léxico:
+   `python manage.py seed_lexicon --per-lang 10000 --langs es,en,fr`
+   (opcional) cargar desde JSON existente:
+   `python manage.py load_lexicon_seed --path lexicon/fixtures/lexicon_seed.json`
+5. Crear un superusuario:
+   `python manage.py createsuperuser`
+6. Iniciar el servidor de desarrollo:
+   `python manage.py runserver`
+
+## Datasets
+
+El repositorio solo incluye pequeños archivos de ejemplo en
+`lexicon/datasets/*_sample.csv`, utilizados por la batería de tests.
+
+Para generar datasets grandes en local:
+
+```
+python scripts/generate_dataset.py --lang es --size 10000
+python manage.py import_words --file lexicon/datasets/auto_es_10000.csv
+```
+
+Los CSV generados se guardan en `lexicon/datasets/` y están ignorados por
+`.gitignore`, por lo que **no deben subirse** al repositorio. Para importar los
+datasets de muestra incluidos simplemente ejecuta:
+
+```
+python manage.py import_words
+```
+
+## Roles y usuarios demo
+
+| Rol               | Puede hacer                                               |
+|-------------------|-----------------------------------------------------------|
+| editor_contenidos | CRUD y CSV en Lexicon                                    |
+| generador         | Crear juegos y exportar                                   |
+| visor             | Ver listados/detalles y descargas existentes              |
+
+Configura grupos y usuarios de prueba:
+
+```
+python manage.py setup_roles
+python manage.py create_demo_users
+```
+
+Usuarios disponibles: `editor/editor123`, `maker/maker123`, `viewer/viewer123`.
+
+## Flujo completo
+
+1. Inicia sesión con `maker/maker123`.
+2. Ve a `/wordsearch/` y crea una sopa de letras de 10x10.
+3. Tras el redirect a `detail/<id>`, revisa la cuadrícula y palabras.
+4. Exporta el resultado a PDF y PNG usando los botones correspondientes.
+5. Entra a `/admin/` y verifica los registros en **Exportaciones**.
+
+## Otros juegos
+
+- `/crossword/` – crucigramas parametrizables con exportación PDF/PNG.
+- `/sudoku/` – sudokus de diversos tamaños y dificultades.
+- `/coloring/` – dibujos para colorear para niños o adultos.
+- `/calligraphy/` – cuadernos de caligrafía exportables a PDF.
+- `/mandala/` – generador de mandalas con exportación a PDF/ZIP.
+- `/lexicon/` – CRUD de idiomas, categorías, palabras y listas con importación CSV.
+
+## Calidad
+
+```
+make lint    # ruff + isort + black
+make test    # pytest -q
+```
+
+Para ejecutar todas las pruebas (unitarias e integración):
+
+```
+pytest
+```
+
+## DX extra
+
+```
+pip install pre-commit
+pre-commit install
+```
+
+Después de instalar los hooks, se ejecutarán automáticamente al hacer commit.
+
+## Docker
+
+1. Copia `.env.example` a `.env` y ajusta las variables necesarias.
+2. Desarrollo:
+   ```
+   docker compose up --build
+   ```
+   Abre http://localhost:8000
+3. Producción local:
+   ```
+   docker compose -f docker-compose.prod.yml --env-file .env up --build -d
+   ```
+   Abre http://localhost (Nginx en el puerto 80)
+4. Crear superusuario:
+   ```
+   docker compose exec web python manage.py createsuperuser
+   ```
+5. Los volúmenes `static_volume` y `media_volume` preservan archivos estáticos y subidos.
+
+En modo producción, Nginx sirve `/static/` y `/media/` directamente y actúa como proxy inverso hacia Gunicorn. La ruta `/health/` responde `ok`.
+
+Para HTTPS puedes considerar soluciones como `nginx-proxy` con `acme-companion`, Caddy o certbot (no implementado aquí).
+
+## Despliegue en VPS
+
+Consulta [docs/deploy/README_VPS.md](docs/deploy/README_VPS.md) para instrucciones paso a paso sobre cómo desplegar el proyecto en un servidor Ubuntu usando Docker Compose, Nginx y systemd.
+
+**Recordatorios de seguridad:**
+- Establece `DJANGO_DEBUG=0` en producción.
+- Usa una `SECRET_KEY` fuerte y única.
+- Configura `ALLOWED_HOSTS` con tu dominio o IP.
+- Define credenciales robustas para la base de datos.
+- Realiza copias de seguridad periódicas del volumen de Postgres (`db_data`).
diff --git a/calligraphy/__init__.py b/calligraphy/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/calligraphy/__init__.py
diff --git a/calligraphy/apps.py b/calligraphy/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..ca35ad7b6d7a24097cc1458aea994a3b45112920
--- /dev/null
+++ b/calligraphy/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class CalligraphyConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'calligraphy'
diff --git a/calligraphy/forms.py b/calligraphy/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..ac7f9d7b605a6dc7dd4419c4ab9c9efd0a94e7f0
--- /dev/null
+++ b/calligraphy/forms.py
@@ -0,0 +1,68 @@
+from django import forms
+
+from lexicon.models import Categoria, Idioma
+
+
+class CalligraphyForm(forms.Form):
+    idioma = forms.ModelChoiceField(queryset=Idioma.objects.all())
+    categorias = forms.ModelMultipleChoiceField(
+        queryset=Categoria.objects.all(), required=False
+    )
+    fuente = forms.ChoiceField(
+        choices=[
+            ("manuscrita", "Manuscrita"),
+            ("cursiva", "Cursiva"),
+            ("mayúsculas", "Mayúsculas"),
+            ("mixta", "Mixta"),
+        ],
+        initial="manuscrita",
+    )
+    tamaño_letra = forms.TypedChoiceField(
+        choices=[(12, "12 pt"), (18, "18 pt"), (24, "24 pt"), (36, "36 pt")],
+        coerce=int,
+        initial=24,
+    )
+    num_paginas = forms.IntegerField(min_value=1, max_value=50, initial=5)
+    lineado = forms.ChoiceField(
+        choices=[
+            ("pauta", "Pauta"),
+            ("cuadrícula", "Cuadrícula"),
+            ("blanco", "Blanco"),
+        ],
+        initial="pauta",
+    )
+    contenido = forms.ChoiceField(
+        choices=[
+            ("letras", "Letras"),
+            ("palabras", "Palabras"),
+            ("frases", "Frases"),
+        ],
+        initial="letras",
+    )
+    seed = forms.IntegerField(required=False)
+
+    def clean_num_paginas(self):
+        num = self.cleaned_data["num_paginas"]
+        if num > 50:
+            raise forms.ValidationError("Demasiadas páginas")
+        return num
+
+    def to_params(self):
+        if not self.is_valid():
+            raise ValueError("Formulario no válido")
+        data = self.cleaned_data
+        categorias = (
+            [c.id for c in data["categorias"]]
+            if data["categorias"]
+            else list(Categoria.objects.values_list("id", flat=True))
+        )
+        return {
+            "idioma": data["idioma"].code,
+            "categorias": categorias,
+            "fuente": data["fuente"],
+            "tamaño_letra": data["tamaño_letra"],
+            "num_paginas": data["num_paginas"],
+            "lineado": data["lineado"],
+            "contenido": data["contenido"],
+            "seed": data.get("seed"),
+        }
diff --git a/calligraphy/migrations/__init__.py b/calligraphy/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/calligraphy/migrations/__init__.py
diff --git a/calligraphy/services/__init__.py b/calligraphy/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..b69ef25eaf2142177a4725df7812162a9b726de1
--- /dev/null
+++ b/calligraphy/services/__init__.py
@@ -0,0 +1 @@
+# Service package for calligraphy
diff --git a/calligraphy/services/exporter.py b/calligraphy/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..0007121637d5aeb2e05b18f52f0b4b5b4aaed47d
--- /dev/null
+++ b/calligraphy/services/exporter.py
@@ -0,0 +1,27 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+from django.conf import settings
+from django.template.loader import render_to_string
+from weasyprint import HTML
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    html = render_to_string(
+        "calligraphy/export.html",
+        {"jg": juego, "paginas": juego.resultado.get("paginas", [])},
+    )
+    pdf_bytes = HTML(string=html).write_pdf()
+
+    base = Path(settings.MEDIA_ROOT) / "exports" / "calligraphy"
+    base.mkdir(parents=True, exist_ok=True)
+    file_path = base / f"{juego.id}.pdf"
+    file_path.write_bytes(pdf_bytes)
+
+    Exportacion.objects.create(
+        juego=juego, formato="pdf", archivo=f"exports/calligraphy/{juego.id}.pdf"
+    )
+    return open(file_path, "rb")
diff --git a/calligraphy/services/generator.py b/calligraphy/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..fc496084c05434a5aca997c4d32114b80638c566
--- /dev/null
+++ b/calligraphy/services/generator.py
@@ -0,0 +1,59 @@
+from __future__ import annotations
+
+import random
+from typing import List
+
+from lexicon.models import Palabra
+
+
+def generate(params: dict) -> dict:
+    seed = params.get("seed")
+    if seed is not None:
+        random.seed(seed)
+
+    idioma = params["idioma"]
+    categorias = params.get("categorias") or []
+    contenido = params["contenido"]
+    num_paginas = params["num_paginas"]
+    lineado = params["lineado"]
+    fuente = params["fuente"]
+    tamaño_letra = params["tamaño_letra"]
+
+    qs = Palabra.objects.filter(idioma__code=idioma)
+    if categorias:
+        qs = qs.filter(categorias__id__in=categorias)
+    palabras = list(qs.values_list("texto", flat=True))
+    if not palabras:
+        raise ValueError("No hay palabras disponibles para los parámetros dados")
+
+    letras_pool = sorted({ch for w in palabras for ch in w.lower() if ch.isalpha()}) or list("abcdefghijklmnopqrstuvwxyz")
+
+    paginas: List[dict] = []
+    for _ in range(num_paginas):
+        lineas: List[str] = []
+        for _ in range(10):
+            if contenido == "letras":
+                letra = random.choice(letras_pool)
+                linea = " ".join([letra] * 10)
+            elif contenido == "palabras":
+                palabra = random.choice(palabras)
+                linea = " ".join([palabra] * 5)
+            else:  # frases
+                frase = " ".join(random.choice(palabras) for _ in range(3))
+                linea = "  ".join([frase] * 2)
+            lineas.append(linea)
+        paginas.append(
+            {
+                "lineas": lineas,
+                "lineado": lineado,
+                "fuente": fuente,
+                "tamaño_letra": tamaño_letra,
+            }
+        )
+
+    return {
+        "paginas": paginas,
+        "seed": seed,
+        "idioma": idioma,
+        "categorias": categorias,
+    }
diff --git a/calligraphy/templates/calligraphy/create.html b/calligraphy/templates/calligraphy/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..cb0a48a9bca1b0e2801ea9e000cdb5859cf248b9
--- /dev/null
+++ b/calligraphy/templates/calligraphy/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Cuaderno de caligrafía · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Cuaderno de caligrafía</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/calligraphy/templates/calligraphy/detail.html b/calligraphy/templates/calligraphy/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..cb4d201eb0420e6ec84d09d086df33a0571a72d3
--- /dev/null
+++ b/calligraphy/templates/calligraphy/detail.html
@@ -0,0 +1,19 @@
+{% extends "base.html" %}
+{% block title %}Cuaderno de caligrafía · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Cuaderno de caligrafía</div>
+    <a class="btn btn-sm" href="{% url 'calligraphy:export' juego.id 'pdf' %}">PDF</a>
+  </div>
+{% endblock %}
+
+{% block content %}
+<div class="row">
+  {% for page in juego.resultado.paginas|slice:":2" %}
+  <div class="col-6">
+    <pre>{{ page.lineas|join:"\n" }}</pre>
+  </div>
+  {% endfor %}
+</div>
+{% endblock %}
diff --git a/calligraphy/templates/calligraphy/export.html b/calligraphy/templates/calligraphy/export.html
new file mode 100644
index 0000000000000000000000000000000000000000..0ced9e571af60a9e2d112eb0248febedf8ec9ddf
--- /dev/null
+++ b/calligraphy/templates/calligraphy/export.html
@@ -0,0 +1,23 @@
+<!doctype html>
+<html lang="es">
+<head>
+  <meta charset="utf-8">
+  <style>
+    body { font-family: system-ui, sans-serif; }
+    .page { page-break-after: always; }
+    .line { border-bottom: 1px solid #999; height: 40px; }
+    .cuadrícula { background-image: linear-gradient(#ccc 1px, transparent 1px), linear-gradient(90deg, #ccc 1px, transparent 1px); background-size: 20px 20px; }
+    .blanco .line { border-bottom: none; }
+  </style>
+</head>
+<body>
+  <h2>Caligrafía #{{ jg.id }}</h2>
+  {% for page in paginas %}
+  <div class="page {{ page.lineado }}">
+    {% for linea in page.lineas %}
+    <div class="line" style="font-size:{{ page.tamaño_letra }}pt;">{{ linea }}</div>
+    {% endfor %}
+  </div>
+  {% endfor %}
+</body>
+</html>
diff --git a/calligraphy/templates/calligraphy/index.html b/calligraphy/templates/calligraphy/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..24d8bd21dcc7a4bd8cdaa385f4987fe2be7cca50
--- /dev/null
+++ b/calligraphy/templates/calligraphy/index.html
@@ -0,0 +1,11 @@
+{% extends "base.html" %}
+{% block title %}Calligraphy · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Calligraphy</div>
+    <a class="btn btn-primary" href="{% url 'calligraphy:create' %}">Crear cuaderno</a>
+  </div>
+{% endblock %}
+
+{% block content %}{% endblock %}
diff --git a/calligraphy/urls.py b/calligraphy/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..7f41fe10efb8493851d235d243ad690feb433961
--- /dev/null
+++ b/calligraphy/urls.py
@@ -0,0 +1,12 @@
+from django.urls import path
+
+from . import views
+
+app_name = "calligraphy"
+
+urlpatterns = [
+    path("", views.index, name="index"),
+    path("create/", views.create, name="create"),
+    path("detail/<int:pk>/", views.detail, name="detail"),
+    path("export/<int:pk>/<str:formato>/", views.export, name="export"),
+]
diff --git a/calligraphy/views.py b/calligraphy/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..1209d4e44985253a2092181fc7e22a114e6c26f4
--- /dev/null
+++ b/calligraphy/views.py
@@ -0,0 +1,50 @@
+from django.contrib.auth.decorators import login_required
+from django.http import HttpResponseBadRequest
+from django.shortcuts import get_object_or_404, redirect, render
+
+from core.auth import require_group
+from puzzles.models import JuegoGenerado
+
+from .forms import CalligraphyForm
+from .services import exporter, generator
+
+
+def index(request):
+    return render(request, "calligraphy/index.html")
+
+
+@require_group("generador")
+def create(request):
+    if request.method == "POST":
+        form = CalligraphyForm(request.POST)
+        if form.is_valid():
+            params = form.to_params()
+            resultado = generator.generate(params)
+            jg = JuegoGenerado.objects.create(
+                tipo="calligraphy",
+                parametros=params,
+                resultado=resultado,
+                seed=params.get("seed") or 0,
+                creado_por=request.user if request.user.is_authenticated else None,
+            )
+            return redirect("calligraphy:detail", pk=jg.pk)
+    else:
+        form = CalligraphyForm(request.GET or None)
+    return render(request, "calligraphy/create.html", {"form": form})
+
+
+@login_required
+def detail(request, pk):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="calligraphy")
+    paginas = jg.resultado.get("paginas", [])[:2]
+    return render(request, "calligraphy/detail.html", {"jg": jg, "paginas": paginas})
+
+
+@login_required
+def export(request, pk, formato):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="calligraphy")
+    if formato == "pdf":
+        exporter.export_to_pdf(jg)
+    else:
+        return HttpResponseBadRequest("Formato no soportado")
+    return redirect("calligraphy:detail", pk=jg.pk)
diff --git a/coloring/__init__.py b/coloring/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/coloring/__init__.py
diff --git a/coloring/apps.py b/coloring/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..e4a4fc4eb9e64e4aef6b3dd66b939a9dc97525bf
--- /dev/null
+++ b/coloring/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class ColoringConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'coloring'
diff --git a/coloring/forms.py b/coloring/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..fa9d87fac6ae6b17a1f0ca203d1210b448ee6689
--- /dev/null
+++ b/coloring/forms.py
@@ -0,0 +1,28 @@
+from django import forms
+
+
+class ColoringForm(forms.Form):
+    TIPO_CHOICES = [("kids", "Niños"), ("adults", "Adultos")]
+    TAM_CHOICES = [("A4", "A4"), ("A5", "A5"), ("Carta", "Carta")]
+    COM_CHOICES = [
+        ("simple", "Simple"),
+        ("medio", "Medio"),
+        ("detallado", "Detallado"),
+    ]
+
+    tipo = forms.ChoiceField(choices=TIPO_CHOICES, initial="kids")
+    tamaño = forms.ChoiceField(choices=TAM_CHOICES, initial="A4")
+    complejidad = forms.ChoiceField(choices=COM_CHOICES, initial="medio")
+    seed = forms.IntegerField(required=False)
+    cantidad = forms.IntegerField(min_value=1, max_value=10, initial=1)
+
+    def clean_cantidad(self) -> int:
+        cant = self.cleaned_data["cantidad"]
+        if cant > 10:
+            raise forms.ValidationError("Máximo 10 dibujos")
+        return cant
+
+    def to_params(self) -> dict:
+        if not self.is_valid():
+            raise ValueError("Formulario no válido")
+        return self.cleaned_data.copy()
diff --git a/coloring/migrations/__init__.py b/coloring/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/coloring/migrations/__init__.py
diff --git a/coloring/services/__init__.py b/coloring/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..912256a340a7948a2e5059d9d45a6afaea44e5a4
--- /dev/null
+++ b/coloring/services/__init__.py
@@ -0,0 +1 @@
+# empty init
diff --git a/coloring/services/exporter.py b/coloring/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..cdafdf40dae0bd51b9fd06a68bfd55ec80c830af
--- /dev/null
+++ b/coloring/services/exporter.py
@@ -0,0 +1,40 @@
+from __future__ import annotations
+
+from pathlib import Path
+import zipfile
+
+from django.conf import settings
+from django.template.loader import render_to_string
+from weasyprint import HTML
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    img_paths = [Path(settings.MEDIA_ROOT) / p for p in juego.resultado]
+    html = render_to_string(
+        "coloring/export.html", {"images": [p.as_uri() for p in img_paths], "jg": juego}
+    )
+    pdf_bytes = HTML(string=html).write_pdf()
+    base = Path(settings.MEDIA_ROOT) / "exports" / "coloring"
+    base.mkdir(parents=True, exist_ok=True)
+    file_path = base / f"{juego.id}.pdf"
+    file_path.write_bytes(pdf_bytes)
+    Exportacion.objects.create(
+        juego=juego, formato="pdf", archivo=f"exports/coloring/{juego.id}.pdf"
+    )
+    return open(file_path, "rb")
+
+
+def export_to_zip(juego: JuegoGenerado):
+    img_paths = [Path(settings.MEDIA_ROOT) / p for p in juego.resultado]
+    base = Path(settings.MEDIA_ROOT) / "exports" / "coloring"
+    base.mkdir(parents=True, exist_ok=True)
+    file_path = base / f"{juego.id}.zip"
+    with zipfile.ZipFile(file_path, "w") as zf:
+        for p in img_paths:
+            zf.write(p, arcname=p.name)
+    Exportacion.objects.create(
+        juego=juego, formato="zip", archivo=f"exports/coloring/{juego.id}.zip"
+    )
+    return open(file_path, "rb")
diff --git a/coloring/services/generator.py b/coloring/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..065e7e4faf57c19c2aeaf0ce6eacf2f1b74c3086
--- /dev/null
+++ b/coloring/services/generator.py
@@ -0,0 +1,83 @@
+from __future__ import annotations
+
+import math
+import uuid
+import random
+from pathlib import Path
+
+from django.conf import settings
+from PIL import Image, ImageDraw
+
+SIZE_MAP = {
+    "A4": (595, 842),
+    "A5": (420, 595),
+    "Carta": (612, 792),
+}
+
+
+def _ensure_dir(path: Path) -> None:
+    path.parent.mkdir(parents=True, exist_ok=True)
+
+
+def _size_px(tamaño: str) -> tuple[int, int]:
+    return SIZE_MAP.get(tamaño, (595, 842))
+
+
+def _generate_kids(seed: int, complejidad: str, tamaño: str) -> str:
+    rng = random.Random(seed)
+    width, height = _size_px(tamaño)
+    img = Image.new("RGB", (width, height), "white")
+    draw = ImageDraw.Draw(img)
+    count = {"simple": 5, "medio": 10, "detallado": 20}[complejidad]
+    for _ in range(count):
+        x1, y1 = rng.randint(0, width - 50), rng.randint(0, height - 50)
+        x2, y2 = x1 + rng.randint(30, 150), y1 + rng.randint(30, 150)
+        if rng.random() < 0.5:
+            draw.rectangle([x1, y1, x2, y2], outline="black", width=3)
+        else:
+            draw.ellipse([x1, y1, x2, y2], outline="black", width=3)
+    file_id = uuid.uuid4().hex
+    rel_path = Path("exports") / "coloring" / f"{file_id}.png"
+    abs_path = Path(settings.MEDIA_ROOT) / rel_path
+    _ensure_dir(abs_path)
+    img.save(abs_path, "PNG")
+    return str(rel_path)
+
+
+def _generate_adults(seed: int, complejidad: str, tamaño: str) -> str:
+    rng = random.Random(seed)
+    width, height = _size_px(tamaño)
+    img = Image.new("RGB", (width, height), "white")
+    draw = ImageDraw.Draw(img)
+    cx, cy = width / 2, height / 2
+    max_r = min(width, height) / 2 - 10
+    rings = {"simple": 5, "medio": 10, "detallado": 20}[complejidad]
+    for i in range(1, rings + 1):
+        r = max_r * i / rings
+        draw.ellipse([cx - r, cy - r, cx + r, cy + r], outline="black", width=2)
+    lines = {"simple": 8, "medio": 16, "detallado": 32}[complejidad]
+    for i in range(lines):
+        angle = 2 * math.pi * i / lines
+        x = cx + max_r * math.cos(angle)
+        y = cy + max_r * math.sin(angle)
+        draw.line([cx, cy, x, y], fill="black", width=2)
+    file_id = uuid.uuid4().hex
+    rel_path = Path("exports") / "coloring" / f"{file_id}.png"
+    abs_path = Path(settings.MEDIA_ROOT) / rel_path
+    _ensure_dir(abs_path)
+    img.save(abs_path, "PNG")
+    return str(rel_path)
+
+
+def generate(params: dict) -> list[dict]:
+    rng = random.Random(params.get("seed"))
+    cantidad = params.get("cantidad", 1)
+    resultados = []
+    for _ in range(cantidad):
+        seed = rng.randint(0, 1_000_000)
+        if params["tipo"] == "kids":
+            path = _generate_kids(seed, params["complejidad"], params["tamaño"])
+        else:
+            path = _generate_adults(seed, params["complejidad"], params["tamaño"])
+        resultados.append({"path": path, "tipo": params["tipo"], "complejidad": params["complejidad"]})
+    return resultados
diff --git a/coloring/templates/coloring/create.html b/coloring/templates/coloring/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..9146b41d2966d824806bfafbc944dd8ee8cff21c
--- /dev/null
+++ b/coloring/templates/coloring/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Coloring · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Coloring</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/coloring/templates/coloring/detail.html b/coloring/templates/coloring/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..cfac4d29fec91dc18bcc9e4524652b3a5337867d
--- /dev/null
+++ b/coloring/templates/coloring/detail.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Coloring · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Coloring</div>
+    <div>
+      <a class="btn btn-sm" href="{% url 'coloring:export' juego.id 'pdf' %}">PDF</a>
+      <a class="btn btn-sm" href="{% url 'coloring:export' juego.id 'zip' %}">ZIP</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<div class="row">
+  {% for img in juego.resultado %}
+  <div class="col-4">
+    <img src="{{ MEDIA_URL }}{{ img.path }}" alt="dibujo" class="img-fluid">
+  </div>
+  {% endfor %}
+</div>
+{% endblock %}
diff --git a/coloring/templates/coloring/export.html b/coloring/templates/coloring/export.html
new file mode 100644
index 0000000000000000000000000000000000000000..cc1774cef826e4bec74a10f9cb5e08206f75bd55
--- /dev/null
+++ b/coloring/templates/coloring/export.html
@@ -0,0 +1,7 @@
+<!doctype html>
+<html><head><meta charset="utf-8"><style>img{width:100%;page-break-after:always;}</style></head>
+<body>
+{% for img in images %}
+  <img src="{{ img }}" />
+{% endfor %}
+</body></html>
diff --git a/coloring/urls.py b/coloring/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..77ef65189af141dd2ca01d73b26e5058070744ff
--- /dev/null
+++ b/coloring/urls.py
@@ -0,0 +1,10 @@
+from django.urls import path
+from . import views
+
+app_name = "coloring"
+
+urlpatterns = [
+    path("", views.create, name="create"),
+    path("detail/<int:pk>/", views.detail, name="detail"),
+    path("export/<int:pk>/<str:formato>/", views.export, name="export"),
+]
diff --git a/coloring/views.py b/coloring/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..2b01ada95226eb6383095f7ed55fcfc13c19b373
--- /dev/null
+++ b/coloring/views.py
@@ -0,0 +1,63 @@
+from __future__ import annotations
+
+import random
+
+from django.conf import settings
+from django.shortcuts import render, redirect, get_object_or_404
+from django.http import FileResponse, Http404
+from django.contrib.auth.decorators import login_required
+from core.auth import require_group
+
+from .forms import ColoringForm
+from .services import generator, exporter
+from puzzles.models import JuegoGenerado
+
+
+@require_group("generador")
+def create(request):
+    if request.method == "POST":
+        form = ColoringForm(request.POST)
+        if form.is_valid():
+            params = form.to_params()
+            if not params.get("seed"):
+                params["seed"] = random.randint(0, 1_000_000)
+            drawings = generator.generate(params)
+            resultado = [d["path"] for d in drawings]
+            tipo = "coloring_kids" if params["tipo"] == "kids" else "coloring_adults"
+            juego = JuegoGenerado.objects.create(
+                tipo=tipo,
+                parametros=params,
+                resultado=resultado,
+                seed=params["seed"],
+                creado_por=request.user if request.user.is_authenticated else None,
+            )
+            return redirect("coloring:detail", pk=juego.pk)
+    else:
+        initial = {"tipo": request.GET.get("tipo", "kids")}
+        form = ColoringForm(initial=initial)
+    return render(request, "coloring/create.html", {"form": form})
+
+
+@login_required
+def detail(request, pk):
+    juego = get_object_or_404(
+        JuegoGenerado, pk=pk, tipo__in=["coloring_kids", "coloring_adults"]
+    )
+    images = [settings.MEDIA_URL + p for p in juego.resultado]
+    return render(request, "coloring/detail.html", {"jg": juego, "images": images})
+
+
+@login_required
+def export(request, pk, formato):
+    juego = get_object_or_404(
+        JuegoGenerado, pk=pk, tipo__in=["coloring_kids", "coloring_adults"]
+    )
+    if formato == "pdf":
+        file_obj = exporter.export_to_pdf(juego)
+        filename = f"coloring_{juego.id}.pdf"
+    elif formato == "zip":
+        file_obj = exporter.export_to_zip(juego)
+        filename = f"coloring_{juego.id}.zip"
+    else:
+        raise Http404
+    return FileResponse(file_obj, as_attachment=True, filename=filename)
diff --git a/conftest.py b/conftest.py
new file mode 100644
index 0000000000000000000000000000000000000000..eeb05b3c67256cc0f76ac2609c5173e2765df653
--- /dev/null
+++ b/conftest.py
@@ -0,0 +1,11 @@
+import pytest
+from django.conf import settings
+from pytest_django.fixtures import django_db_setup  # noqa: F401
+
+
+@pytest.fixture
+def tmp_media_dir(tmp_path, settings):
+    old_media_root = settings.MEDIA_ROOT
+    settings.MEDIA_ROOT = tmp_path
+    yield tmp_path
+    settings.MEDIA_ROOT = old_media_root
diff --git a/core/__init__.py b/core/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b137891791fe96927ad78e64b0aad7bded08bdc
--- /dev/null
+++ b/core/__init__.py
@@ -0,0 +1 @@
+
diff --git a/core/apps.py b/core/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..8115ae60bc647249211ecbd4bbf6aa65478e9b5c
--- /dev/null
+++ b/core/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class CoreConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'core'
diff --git a/core/auth.py b/core/auth.py
new file mode 100644
index 0000000000000000000000000000000000000000..f9b350e597b88ecd1c2d43cee44aef2eb3338ac7
--- /dev/null
+++ b/core/auth.py
@@ -0,0 +1,22 @@
+from functools import wraps
+from django.contrib.auth.views import redirect_to_login
+from django.core.exceptions import PermissionDenied
+
+
+def in_group(user, name: str) -> bool:
+    return user.is_authenticated and user.groups.filter(name=name).exists()
+
+
+def require_group(name: str):
+    def decorator(view_func):
+        @wraps(view_func)
+        def _wrapped(request, *args, **kwargs):
+            if in_group(request.user, name):
+                return view_func(request, *args, **kwargs)
+            if request.user.is_authenticated:
+                raise PermissionDenied
+            return redirect_to_login(request.get_full_path(), "/accounts/login/")
+
+        return _wrapped
+
+    return decorator
diff --git a/core/management/__init__.py b/core/management/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/core/management/__init__.py
diff --git a/core/management/commands/__init__.py b/core/management/commands/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/core/management/commands/__init__.py
diff --git a/core/management/commands/create_demo_users.py b/core/management/commands/create_demo_users.py
new file mode 100644
index 0000000000000000000000000000000000000000..26ef1f2281d0b411cd8af26a97d4def9c799ed45
--- /dev/null
+++ b/core/management/commands/create_demo_users.py
@@ -0,0 +1,26 @@
+from django.contrib.auth import get_user_model
+from django.contrib.auth.models import Group
+from django.core.management.base import BaseCommand
+
+USERS = [
+    ("admin", "admin", {"is_staff": True, "is_superuser": True, "groups": []}),
+    ("editor", "editor123", {"groups": ["editor_contenidos"]}),
+    ("maker", "maker123", {"groups": ["generador"]}),
+    ("viewer", "viewer123", {"groups": ["visor"]}),
+]
+
+
+class Command(BaseCommand):
+    help = "Create demo users for development"
+
+    def handle(self, *args, **options):
+        User = get_user_model()
+        for username, password, extra in USERS:
+            user, created = User.objects.get_or_create(username=username, defaults=extra)
+            if created:
+                user.set_password(password)
+            for gname in extra.get("groups", []):
+                group = Group.objects.get(name=gname)
+                user.groups.add(group)
+            user.save()
+            self.stdout.write(self.style.SUCCESS(f"User {username}/{password}"))
diff --git a/core/management/commands/setup_roles.py b/core/management/commands/setup_roles.py
new file mode 100644
index 0000000000000000000000000000000000000000..efe5243788fbaf1f0971ba66df53320a87d229a8
--- /dev/null
+++ b/core/management/commands/setup_roles.py
@@ -0,0 +1,40 @@
+from django.core.management.base import BaseCommand
+from django.contrib.auth.models import Group, Permission
+from django.contrib.contenttypes.models import ContentType
+from lexicon.models import Idioma, Categoria, Palabra, ListaPalabras
+from puzzles.models import JuegoGenerado, Exportacion
+
+
+class Command(BaseCommand):
+    help = "Create default groups and assign permissions"
+
+    def handle(self, *args, **options):
+        groups = {}
+        for name in ["editor_contenidos", "generador", "visor"]:
+            group, _ = Group.objects.get_or_create(name=name)
+            groups[name] = group
+
+        # editor_contenidos
+        editor = groups["editor_contenidos"]
+        models = [Idioma, Categoria, Palabra, ListaPalabras]
+        for model in models:
+            ct = ContentType.objects.get_for_model(model)
+            perms = Permission.objects.filter(content_type=ct)
+            editor.permissions.add(*perms)
+
+        # generador
+        generador = groups["generador"]
+        for model in [JuegoGenerado, Exportacion]:
+            ct = ContentType.objects.get_for_model(model)
+            perms = Permission.objects.filter(content_type=ct)
+            generador.permissions.add(*perms)
+
+        # visor
+        visor = groups["visor"]
+        for model in [JuegoGenerado, Exportacion]:
+            ct = ContentType.objects.get_for_model(model)
+            perms = Permission.objects.filter(content_type=ct, codename__startswith="view")
+            visor.permissions.add(*perms)
+
+        for name, group in groups.items():
+            self.stdout.write(self.style.SUCCESS(f"Grupo {name}: {group.permissions.count()} permisos"))
diff --git a/core/migrations/__init__.py b/core/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b137891791fe96927ad78e64b0aad7bded08bdc
--- /dev/null
+++ b/core/migrations/__init__.py
@@ -0,0 +1 @@
+
diff --git a/core/templates/core/home.html b/core/templates/core/home.html
new file mode 100644
index 0000000000000000000000000000000000000000..330d7ddb82b8fb6399f7202a614addf6ee7e552d
--- /dev/null
+++ b/core/templates/core/home.html
@@ -0,0 +1,45 @@
+{% extends "base.html" %}
+{% block title %}Inicio · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Juegos Django</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+  <form method="get" class="field">
+    <input type="search" name="q" value="{{ query }}" placeholder="Buscar por tipo">
+    <button class="btn btn-primary" type="submit">Buscar</button>
+  </form>
+
+  <div class="row">
+    {% for card in cards %}
+    <div class="col-4">
+      <div class="card">
+        <div class="card-header">
+          <div class="card-title">{{ card.name }}</div>
+        </div>
+        <p>{{ card.desc }}</p>
+        <a href="{{ card.url }}" class="btn btn-primary">Abrir</a>
+      </div>
+    </div>
+    {% endfor %}
+  </div>
+
+   <h2>Últimos generados</h2>
+  <table class="table">
+    <thead><tr><th>Tipo</th><th>Fecha</th><th></th></tr></thead>
+    <tbody>
+      {% for item in recientes %}
+      <tr>
+        <td>{{ item.obj.tipo }}</td>
+        <td>{{ item.obj.created_at|date:"Y-m-d H:i" }}</td>
+        <td><a class="btn btn-sm" href="{{ item.url }}">Ver</a></td>
+      </tr>
+      {% empty %}
+      <tr><td colspan="3">Sin resultados</td></tr>
+      {% endfor %}
+    </tbody>
+  </table>
+{% endblock %}
diff --git a/core/templates/core/signup.html b/core/templates/core/signup.html
new file mode 100644
index 0000000000000000000000000000000000000000..c0313c3c0769e01e22f2ac89ed4a7ac459fafee8
--- /dev/null
+++ b/core/templates/core/signup.html
@@ -0,0 +1,18 @@
+{% extends "base.html" %}
+{% block title %}Registro{% endblock %}
+{% block header %}
+  <div class="card-header"><div class="card-title">Crear cuenta</div></div>
+{% endblock %}
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Registrarse</button>
+</form>
+{% endblock %}
diff --git a/core/templatetags/__init__.py b/core/templatetags/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..bb7b160deb3702579ff14f2f54ba52fed671a4cc
--- /dev/null
+++ b/core/templatetags/__init__.py
@@ -0,0 +1 @@
+# Intentionally empty
diff --git a/core/templatetags/nav.py b/core/templatetags/nav.py
new file mode 100644
index 0000000000000000000000000000000000000000..4cbeb2eaa949285eed1cf9c8405781854ee6e210
--- /dev/null
+++ b/core/templatetags/nav.py
@@ -0,0 +1,15 @@
+from django import template
+from django.urls import reverse, NoReverseMatch
+
+register = template.Library()
+
+@register.simple_tag(takes_context=True)
+def active_url(context, url_name):
+  request = context.get('request')
+  try:
+    url = reverse(url_name)
+  except NoReverseMatch:
+    return ''
+  if request.path == url:
+    return 'active'
+  return ''
diff --git a/core/templatetags/roles.py b/core/templatetags/roles.py
new file mode 100644
index 0000000000000000000000000000000000000000..7b8f7fb541f28bf18b443456ce3b17e7c4f5be2d
--- /dev/null
+++ b/core/templatetags/roles.py
@@ -0,0 +1,9 @@
+from django import template
+from core.auth import in_group
+
+register = template.Library()
+
+
+@register.filter(name="in_group")
+def in_group_filter(user, name):
+    return in_group(user, name)
diff --git a/core/urls.py b/core/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..d4d62d3bf34f5f53ef000e8e0d41944cfe87d173
--- /dev/null
+++ b/core/urls.py
@@ -0,0 +1,10 @@
+from django.contrib.auth import views as auth_views
+from django.urls import path
+from . import views
+
+urlpatterns = [
+    path('', views.home, name='home'),
+    path('accounts/login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
+    path('accounts/logout/', auth_views.LogoutView.as_view(), name='logout'),
+    path('accounts/signup/', views.signup, name='signup'),
+]
diff --git a/core/utils.py b/core/utils.py
new file mode 100644
index 0000000000000000000000000000000000000000..294b647f84f5c2bf191d613c5f59df0c4393cf49
--- /dev/null
+++ b/core/utils.py
@@ -0,0 +1,11 @@
+from django.urls import reverse
+
+DETAIL_URLS = {
+    "wordsearch": lambda pk: reverse("wordsearch:detail", args=[pk]),
+    "crossword": lambda pk: reverse("crossword:detail", args=[pk]),
+    "sudoku": lambda pk: reverse("sudoku:detail", args=[pk]),
+    "coloring_kids": lambda pk: reverse("coloring:detail", args=[pk]),
+    "coloring_adults": lambda pk: reverse("coloring:detail", args=[pk]),
+    "calligraphy": lambda pk: reverse("calligraphy:detail", args=[pk]),
+    "mandala": lambda pk: reverse("mandala:detail", args=[pk]),
+}
diff --git a/core/views.py b/core/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..42868c27fe98cc2c885e9b0dd0133de69362a508
--- /dev/null
+++ b/core/views.py
@@ -0,0 +1,121 @@
+from django.contrib.auth import login
+from django.contrib.auth.forms import UserCreationForm
+from django.contrib.auth.models import Group
+from django.db.models import Count
+from django.shortcuts import redirect, render
+from django.urls import reverse
+
+from core.auth import in_group
+from puzzles.models import JuegoGenerado
+
+from .utils import DETAIL_URLS
+
+
+def home(request):
+    cards = []
+    if in_group(request.user, "generador"):
+        cards.extend(
+            [
+                {
+                    "name": "Sopa de letras",
+                    "url": reverse("wordsearch:create"),
+                    "desc": "Genera sopas parametrizables",
+                    "icon": "bi-grid",
+                },
+                {
+                    "name": "Crucigrama",
+                    "url": reverse("crossword:create"),
+                    "desc": "Rejillas con pistas",
+                    "icon": "bi-table",
+                },
+                {
+                    "name": "Sudoku",
+                    "url": reverse("sudoku:create"),
+                    "desc": "N×N y dificultad",
+                    "icon": "bi-123",
+                },
+                {
+                    "name": "Dibujos (Niños)",
+                    "url": reverse("coloring:create") + "?tipo=kids",
+                    "desc": "Figuras simples",
+                    "icon": "bi-brush",
+                },
+                {
+                    "name": "Dibujos (Adultos)",
+                    "url": reverse("coloring:create") + "?tipo=adults",
+                    "desc": "Mandalas/detalle",
+                    "icon": "bi-flower3",
+                },
+                {
+                    "name": "Caligrafía",
+                    "url": reverse("calligraphy:create"),
+                    "desc": "Cuadernos PDF",
+                    "icon": "bi-pen",
+                },
+                {
+                    "name": "Mandala",
+                    "url": reverse("mandala:index"),
+                    "desc": "Simetría radial",
+                    "icon": "bi-sun",
+                },
+                {
+                    "name": "Laberintos",
+                    "url": reverse("maze:create"),
+                    "desc": "Rectangulares o circulares",
+                    "icon": "bi-diagram-3",
+                },
+            ]
+        )
+    if in_group(request.user, "editor_contenidos"):
+        cards.append(
+            {
+                "name": "Léxico",
+                "url": reverse("lexicon:index"),
+                "desc": "Palabras y categorías",
+                "icon": "bi-collection",
+            }
+        )
+
+    q = request.GET.get("q")
+    juegos = JuegoGenerado.objects.all()
+    if request.user.is_authenticated:
+        juegos = juegos.filter(creado_por=request.user)
+    if q:
+        juegos = juegos.filter(tipo__icontains=q)
+
+    recientes_qs = juegos.order_by("-created_at")[:12]
+    recientes = []
+    for jg in recientes_qs:
+        resolver = DETAIL_URLS.get(jg.tipo)
+        url = resolver(jg.pk) if resolver else "#"
+        recientes.append({"obj": jg, "url": url})
+
+    total_por_tipo = (
+        JuegoGenerado.objects.values("tipo").annotate(n=Count("id")).order_by()
+    )
+
+    context = {
+        "cards": cards,
+        "recientes": recientes,
+        "total_por_tipo": total_por_tipo,
+        "query": q or "",
+    }
+    return render(request, "core/home.html", context)
+
+
+def signup(request):
+    if request.method == "POST":
+        form = UserCreationForm(request.POST)
+        if form.is_valid():
+            user = form.save()
+            group = Group.objects.get(name="visor")
+            user.groups.add(group)
+            login(request, user)
+            return redirect("home")
+    else:
+        form = UserCreationForm()
+    return render(request, "core/signup.html", {"form": form})
+
+
+def handler403(request, exception=None):
+    return render(request, "403.html", status=403)
diff --git a/crossword/__init__.py b/crossword/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/crossword/__init__.py
diff --git a/crossword/apps.py b/crossword/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..d6fcb2459a68b3772c9e3f43be3f04a824461817
--- /dev/null
+++ b/crossword/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class CrosswordConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'crossword'
diff --git a/crossword/forms.py b/crossword/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..df303b5c0d05bdf36fd342f7e00174bd2195a5e3
--- /dev/null
+++ b/crossword/forms.py
@@ -0,0 +1,52 @@
+from django import forms
+
+from lexicon.models import Categoria, Idioma
+
+
+class CrosswordForm(forms.Form):
+    idioma = forms.ModelChoiceField(queryset=Idioma.objects.all())
+    categorias = forms.ModelMultipleChoiceField(
+        queryset=Categoria.objects.all(), required=False
+    )
+    ancho = forms.IntegerField(min_value=5, max_value=20, initial=12)
+    alto = forms.IntegerField(min_value=5, max_value=20, initial=12)
+    num_palabras = forms.IntegerField(min_value=3, max_value=50, initial=15)
+    dificultad_min = forms.IntegerField(min_value=1, max_value=5, initial=1)
+    dificultad_max = forms.IntegerField(min_value=1, max_value=5, initial=5)
+    seed = forms.IntegerField(required=False)
+
+    def clean(self):
+        cleaned = super().clean()
+        ancho = cleaned.get('ancho') or 0
+        alto = cleaned.get('alto') or 0
+        num_palabras = cleaned.get('num_palabras') or 0
+        if num_palabras > (ancho * alto) // 3:
+            self.add_error(
+                'num_palabras', 'Demasiadas palabras para el tamaño del tablero.'
+            )
+        min_d = cleaned.get('dificultad_min')
+        max_d = cleaned.get('dificultad_max')
+        if min_d is not None and max_d is not None and min_d > max_d:
+            self.add_error(
+                'dificultad_max',
+                'La dificultad máxima debe ser mayor o igual a la mínima.',
+            )
+        return cleaned
+
+    def to_params(self):
+        data = self.cleaned_data
+        categorias = (
+            [c.id for c in data['categorias']]
+            if data['categorias']
+            else list(Categoria.objects.values_list('id', flat=True))
+        )
+        return {
+            'idioma': data['idioma'].code,
+            'categorias': categorias,
+            'ancho': data['ancho'],
+            'alto': data['alto'],
+            'num_palabras': data['num_palabras'],
+            'dificultad_min': data['dificultad_min'],
+            'dificultad_max': data['dificultad_max'],
+            'seed': data['seed'],
+        }
diff --git a/crossword/migrations/__init__.py b/crossword/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/crossword/migrations/__init__.py
diff --git a/crossword/services/__init__.py b/crossword/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..84474f94ba0642b031e293be8889fa522e657c9d
--- /dev/null
+++ b/crossword/services/__init__.py
@@ -0,0 +1 @@
+# Service package for crossword
diff --git a/crossword/services/exporter.py b/crossword/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..c3d08da05696d8c49117916864770c9c3e1d33ab
--- /dev/null
+++ b/crossword/services/exporter.py
@@ -0,0 +1,82 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+from django.conf import settings
+from django.template.loader import render_to_string
+from weasyprint import HTML
+from PIL import Image, ImageDraw, ImageFont
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+BLOCK_CHARS = {"#", ".", "", None}
+
+
+def _ensure_dir(path: Path) -> None:
+    path.parent.mkdir(parents=True, exist_ok=True)
+
+
+def _is_block(cell: str | None) -> bool:
+    return cell in BLOCK_CHARS
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    grid = juego.resultado.get("grid", [])
+    definiciones = juego.resultado.get("definiciones", [])
+    html = render_to_string(
+        "crossword/export.html",
+        {"jg": juego, "grid": grid, "definiciones": definiciones},
+    )
+    pdf_bytes = HTML(string=html).write_pdf()
+
+    file_path = Path(settings.MEDIA_ROOT) / "exports" / "crossword" / f"{juego.id}.pdf"
+    _ensure_dir(file_path)
+    file_path.write_bytes(pdf_bytes)
+
+    Exportacion.objects.create(
+        juego=juego,
+        formato="pdf",
+        archivo=f"exports/crossword/{juego.id}.pdf",
+    )
+    return open(file_path, "rb")
+
+
+def export_to_png(juego: JuegoGenerado, cell: int = 48, margin: int = 20):
+    grid = juego.resultado.get("grid", [])
+    if not grid:
+        raise ValueError("No hay datos de grid para exportar")
+    ancho = len(grid[0])
+    alto = len(grid)
+    width = margin * 2 + cell * ancho
+    height = margin * 2 + cell * alto
+    img = Image.new("RGB", (width, height), "white")
+    draw = ImageDraw.Draw(img)
+    try:
+        font = ImageFont.truetype("DejaVuSansMono.ttf", cell - 10)
+    except OSError:
+        font = ImageFont.load_default()
+
+    for y, row in enumerate(grid):
+        for x, ch in enumerate(row):
+            x1 = margin + x * cell
+            y1 = margin + y * cell
+            x2 = x1 + cell
+            y2 = y1 + cell
+            if _is_block(ch):
+                draw.rectangle([x1, y1, x2, y2], fill="black", outline="black")
+            else:
+                draw.rectangle([x1, y1, x2, y2], fill="white", outline="black")
+                w, h = draw.textsize(ch, font=font)
+                draw.text((x1 + (cell - w) / 2, y1 + (cell - h) / 2), ch, fill="black", font=font)
+
+    file_path = Path(settings.MEDIA_ROOT) / "exports" / "crossword" / f"{juego.id}.png"
+    _ensure_dir(file_path)
+    img.save(file_path, "PNG")
+
+    Exportacion.objects.create(
+        juego=juego,
+        formato="png",
+        archivo=f"exports/crossword/{juego.id}.png",
+    )
+    return open(file_path, "rb")
diff --git a/crossword/services/generator.py b/crossword/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..f02919c31e5cab62037be6accf7fc515657b8768
--- /dev/null
+++ b/crossword/services/generator.py
@@ -0,0 +1,96 @@
+import random
+import unicodedata
+
+
+def _normalize(word: str) -> str:
+    nfkd = unicodedata.normalize('NFKD', word)
+    only_ascii = nfkd.encode('ascii', 'ignore').decode('ascii')
+    letters = [c for c in only_ascii if c.isalpha()]
+    return ''.join(letters).upper()
+
+
+def _try_place(grid, word, x, y, horizontal):
+    width = len(grid[0])
+    height = len(grid)
+    for i, ch in enumerate(word):
+        xi = x + i if horizontal else x
+        yi = y if horizontal else y + i
+        if xi < 0 or yi < 0 or xi >= width or yi >= height:
+            return False
+        cell = grid[yi][xi]
+        if cell not in (None, ch):
+            return False
+    for i, ch in enumerate(word):
+        xi = x + i if horizontal else x
+        yi = y if horizontal else y + i
+        grid[yi][xi] = ch
+    return True
+
+
+def generate(params: dict, palabras: list[dict]) -> dict:
+    width = params['ancho']
+    height = params['alto']
+    seed = params.get('seed')
+    rng = random.Random(seed)
+    max_len = max(width, height)
+
+    candidates = []
+    for p in palabras:
+        w = _normalize(p['texto'])
+        if w and len(w) <= max_len:
+            candidates.append({'word': w, 'definicion': p['definicion']})
+    if len(candidates) < params['num_palabras']:
+        raise ValueError('No hay suficientes palabras para generar el crucigrama')
+    rng.shuffle(candidates)
+
+    grid = [[None for _ in range(width)] for _ in range(height)]
+    usados = []
+    defs = []
+
+    for entry in candidates:
+        if len(usados) >= params['num_palabras']:
+            break
+        word = entry['word']
+        definicion = entry['definicion']
+        colocado = False
+        for _ in range(200):
+            horizontal = rng.choice([True, False])
+            if horizontal:
+                xs = list(range(0, width - len(word) + 1))
+                ys = list(range(0, height))
+            else:
+                xs = list(range(0, width))
+                ys = list(range(0, height - len(word) + 1))
+            if not xs or not ys:
+                continue
+            x = rng.choice(xs)
+            y = rng.choice(ys)
+            if _try_place(grid, word, x, y, horizontal):
+                usados.append(word)
+                defs.append({
+                    'palabra': word,
+                    'pista': definicion,
+                    'fila': y,
+                    'col': x,
+                    'orientacion': 'H' if horizontal else 'V',
+                })
+                colocado = True
+                break
+        if not colocado:
+            continue
+    if len(usados) < params['num_palabras']:
+        raise ValueError('No se pudieron colocar todas las palabras')
+
+    for y in range(height):
+        for x in range(width):
+            if grid[y][x] is None:
+                grid[y][x] = '#'
+    grid_strings = [''.join(row) for row in grid]
+    return {
+        'grid': grid_strings,
+        'palabras': usados,
+        'definiciones': defs,
+        'ancho': width,
+        'alto': height,
+        'seed': seed,
+    }
diff --git a/crossword/services/repository.py b/crossword/services/repository.py
new file mode 100644
index 0000000000000000000000000000000000000000..1d63a9a20716a3a75bc3a01111cac3178577e283
--- /dev/null
+++ b/crossword/services/repository.py
@@ -0,0 +1,17 @@
+from lexicon.models import Palabra
+
+
+def fetch_palabras(idioma_code, categorias_ids, dificultad_min, dificultad_max, limit):
+    qs = Palabra.objects.filter(
+        idioma_id=idioma_code,
+        dificultad__gte=dificultad_min,
+        dificultad__lte=dificultad_max,
+    )
+    if categorias_ids:
+        qs = qs.filter(categorias__in=categorias_ids).distinct()
+    qs = qs.prefetch_related('categorias')[: limit * 3]
+    resultados = []
+    for p in qs:
+        definicion = ', '.join(p.categorias.values_list('nombre', flat=True)) or p.texto
+        resultados.append({'texto': p.texto, 'definicion': definicion})
+    return resultados
diff --git a/crossword/templates/crossword/create.html b/crossword/templates/crossword/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..cbff1c5a13abac425f010348d1b09e21e16790e9
--- /dev/null
+++ b/crossword/templates/crossword/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Generar Crucigrama · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Crucigrama</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/crossword/templates/crossword/detail.html b/crossword/templates/crossword/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..22a1f829212a178844914e5eca4ccbd57f7be8f1
--- /dev/null
+++ b/crossword/templates/crossword/detail.html
@@ -0,0 +1,48 @@
+{% extends "base.html" %}
+{% block title %}Crucigrama · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Crucigrama</div>
+    <div>
+      <a class="btn btn-sm" href="{% url 'crossword:export' juego.id 'pdf' %}">PDF</a>
+      <a class="btn btn-sm" href="{% url 'crossword:export' juego.id 'png' %}">PNG</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<p><strong>Tamaño:</strong> {{ juego.resultado.ancho }} × {{ juego.resultado.alto }} | <strong>Seed:</strong> {{ juego.resultado.seed }}</p>
+<table class="table">
+  {% for row in juego.resultado.grid %}
+  <tr>
+    {% for ch in row %}
+    {% if ch == '#' %}
+      <td></td>
+    {% else %}
+      <td>{{ ch }}</td>
+    {% endif %}
+    {% endfor %}
+  </tr>
+  {% endfor %}
+</table>
+<h5>Definiciones</h5>
+<ol>
+  {% for d in juego.resultado.definiciones %}
+  <li>{{ d.pista }} ({{ d.orientacion|yesno:"horizontal,vertical" }})</li>
+  {% endfor %}
+</ol>
+<form method="post" action="{% url 'crossword:create' %}">
+  {% csrf_token %}
+  {% for key, val in juego.parametros.items %}
+    {% if key == 'categorias' %}
+      {% for c in val %}
+        <input type="hidden" name="categorias" value="{{ c }}">
+      {% endfor %}
+    {% else %}
+      <input type="hidden" name="{{ key }}" value="{{ val }}">
+    {% endif %}
+  {% endfor %}
+  <button class="btn btn-primary">Duplicar</button>
+</form>
+{% endblock %}
diff --git a/crossword/templates/crossword/export.html b/crossword/templates/crossword/export.html
new file mode 100644
index 0000000000000000000000000000000000000000..b597965f7601612d9d90a935b2f1d0e87fbb51d1
--- /dev/null
+++ b/crossword/templates/crossword/export.html
@@ -0,0 +1,40 @@
+<!doctype html>
+<html>
+<head>
+  <meta charset="utf-8">
+  <style>
+    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
+    .grid { border-collapse: collapse; }
+    .grid td { width: 24px; height: 24px; text-align: center; vertical-align: middle; border: 1px solid #222; font-weight: 600; }
+    .block { background:#000; color:#000; }
+    .defs { margin-top: 16px; }
+    .defs h3 { margin: 0.6rem 0 0.2rem; }
+    .defs ol { margin: 0; padding-left: 1.1rem; }
+  </style>
+</head>
+<body>
+  <h2>Crucigrama #{{ jg.id }}</h2>
+  <table class="grid">
+    {% for row in grid %}
+      <tr>
+        {% for cell in row %}
+          {% if cell == "#" or cell == "." or cell == "" or cell is none %}
+            <td class="block">&nbsp;</td>
+          {% else %}
+            <td>{{ cell }}</td>
+          {% endif %}
+        {% endfor %}
+      </tr>
+    {% endfor %}
+  </table>
+
+  <div class="defs">
+    <h3>Definiciones</h3>
+    <ol>
+      {% for d in definiciones %}
+        <li>{{ d.pista|default:d.definicion }} ({{ d.orientacion|default:"?" }}, fila {{ d.fila }}, col {{ d.col }})</li>
+      {% endfor %}
+    </ol>
+  </div>
+</body>
+</html>
diff --git a/crossword/urls.py b/crossword/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..1d85c719706854e181871d7f093c49a8d1496a49
--- /dev/null
+++ b/crossword/urls.py
@@ -0,0 +1,10 @@
+from django.urls import path
+from . import views
+
+app_name = 'crossword'
+
+urlpatterns = [
+    path('', views.create, name='create'),
+    path('detail/<int:pk>/', views.detail, name='detail'),
+    path('export/<int:pk>/<str:formato>/', views.export, name='export'),
+]
diff --git a/crossword/views.py b/crossword/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..8da4a465e862b8a868ccd116dd365340a75e089a
--- /dev/null
+++ b/crossword/views.py
@@ -0,0 +1,61 @@
+from django.shortcuts import render, redirect, get_object_or_404
+from django.http import FileResponse, HttpResponseBadRequest
+from django.contrib.auth.decorators import login_required
+from core.auth import require_group
+from .forms import CrosswordForm
+from .services import repository, generator, exporter
+from puzzles.models import JuegoGenerado
+import random
+
+
+@require_group("generador")
+def create(request):
+    if request.method == 'POST':
+        form = CrosswordForm(request.POST)
+        if form.is_valid():
+            params = form.to_params()
+            if not params.get('seed'):
+                params['seed'] = random.randint(0, 999999)
+            palabras = repository.fetch_palabras(
+                params['idioma'],
+                params['categorias'],
+                params['dificultad_min'],
+                params['dificultad_max'],
+                params['num_palabras'],
+            )
+            try:
+                resultado = generator.generate(params, palabras)
+            except ValueError as e:
+                form.add_error(None, str(e))
+            else:
+                juego = JuegoGenerado.objects.create(
+                    tipo='crossword',
+                    parametros=params,
+                    resultado=resultado,
+                    seed=params['seed'],
+                    creado_por=request.user if request.user.is_authenticated else None,
+                )
+                return redirect('crossword:detail', pk=juego.pk)
+    else:
+        form = CrosswordForm()
+    return render(request, 'crossword/create.html', {'form': form})
+
+
+@login_required
+def detail(request, pk):
+    juego = get_object_or_404(JuegoGenerado, pk=pk, tipo='crossword')
+    return render(request, 'crossword/detail.html', {'juego': juego})
+
+
+@login_required
+def export(request, pk, formato):
+    juego = get_object_or_404(JuegoGenerado, pk=pk, tipo='crossword')
+    if formato == 'pdf':
+        file_obj = exporter.export_to_pdf(juego)
+        filename = f"crossword_{juego.id}.pdf"
+    elif formato == 'png':
+        file_obj = exporter.export_to_png(juego)
+        filename = f"crossword_{juego.id}.png"
+    else:
+        return HttpResponseBadRequest("Formato no soportado")
+    return FileResponse(file_obj, as_attachment=True, filename=filename)
diff --git a/docker-compose.prod.yml b/docker-compose.prod.yml
new file mode 100644
index 0000000000000000000000000000000000000000..77e29eb74d6fde08fe3df687e65a9b6128bed4cc
--- /dev/null
+++ b/docker-compose.prod.yml
@@ -0,0 +1,44 @@
+version: "3.9"
+services:
+  nginx:
+    image: nginx:1.27-alpine
+    depends_on:
+      - web
+    ports:
+      - "80:80"
+    volumes:
+      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
+      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
+      - static_volume:/static:ro
+      - media_volume:/media:ro
+    restart: unless-stopped
+  web:
+    build: .
+    entrypoint: bash docker/entrypoint.sh
+    command: gunicorn juegos.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
+    env_file: .env
+    environment:
+      DJANGO_DEBUG: 0
+      DJANGO_SECURE_PROXY_SSL_HEADER: "HTTP_X_FORWARDED_PROTO,https"
+    volumes:
+      - static_volume:/app/staticfiles
+      - media_volume:/app/media
+    depends_on:
+      - db
+  db:
+    image: postgres:16
+    environment:
+      POSTGRES_DB: ${DB_NAME}
+      POSTGRES_USER: ${DB_USER}
+      POSTGRES_PASSWORD: ${DB_PASSWORD}
+    volumes:
+      - db_data:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
+      interval: 10s
+      timeout: 5s
+      retries: 10
+volumes:
+  db_data:
+  static_volume:
+  media_volume:
diff --git a/docker-compose.yml b/docker-compose.yml
new file mode 100644
index 0000000000000000000000000000000000000000..161715dfbbe3bc95802e567cc37662de15647ffc
--- /dev/null
+++ b/docker-compose.yml
@@ -0,0 +1,32 @@
+version: "3.9"
+services:
+  web:
+    build: .
+    entrypoint: bash docker/entrypoint.sh
+    command: python manage.py runserver 0.0.0.0:8000
+    env_file: .env
+    volumes:
+      - .:/app
+      - static_volume:/app/staticfiles
+      - media_volume:/app/media
+    ports:
+      - "8000:8000"
+    depends_on:
+      - db
+  db:
+    image: postgres:16
+    environment:
+      POSTGRES_DB: ${DB_NAME}
+      POSTGRES_USER: ${DB_USER}
+      POSTGRES_PASSWORD: ${DB_PASSWORD}
+    volumes:
+      - db_data:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
+      interval: 10s
+      timeout: 5s
+      retries: 10
+volumes:
+  db_data:
+  static_volume:
+  media_volume:
diff --git a/docker/entrypoint.sh b/docker/entrypoint.sh
new file mode 100755
index 0000000000000000000000000000000000000000..835a56dc4b781e3e57fd1ac0cfaff008d89ccaac
--- /dev/null
+++ b/docker/entrypoint.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env bash
+set -e
+python manage.py collectstatic --noinput || true
+python manage.py migrate --noinput
+exec "$@"
diff --git a/docker/nginx/conf.d/app.conf b/docker/nginx/conf.d/app.conf
new file mode 100644
index 0000000000000000000000000000000000000000..ce017f4ea2f77a0619921822425f567638866da9
--- /dev/null
+++ b/docker/nginx/conf.d/app.conf
@@ -0,0 +1,42 @@
+server {
+  listen 80;
+  server_name _;
+
+  add_header X-Frame-Options SAMEORIGIN;
+  add_header X-Content-Type-Options nosniff;
+  add_header Referrer-Policy strict-origin-when-cross-origin;
+  add_header X-XSS-Protection "1; mode=block";
+
+  client_max_body_size 25M;
+
+  location /static/ {
+    alias /static/;
+    access_log off;
+    expires 7d;
+  }
+
+  location /media/ {
+    alias /media/;
+    access_log off;
+    expires 7d;
+  }
+
+  location / {
+    proxy_set_header Host $host;
+    proxy_set_header X-Real-IP $remote_addr;
+    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+    proxy_set_header X-Forwarded-Proto $scheme;
+    proxy_redirect off;
+
+    proxy_read_timeout 300;
+    proxy_connect_timeout 300;
+    proxy_send_timeout 300;
+
+    proxy_pass http://web:8000;
+  }
+
+  location = /health/ {
+    return 200 "ok";
+    add_header Content-Type text/plain;
+  }
+}
diff --git a/docker/nginx/nginx.conf b/docker/nginx/nginx.conf
new file mode 100644
index 0000000000000000000000000000000000000000..1a97b3ab1e286906a3300fa1345069cf22ce8404
--- /dev/null
+++ b/docker/nginx/nginx.conf
@@ -0,0 +1,23 @@
+user  nginx;
+worker_processes auto;
+error_log  /var/log/nginx/error.log warn;
+pid        /var/run/nginx.pid;
+
+events { worker_connections 1024; }
+
+http {
+  include       /etc/nginx/mime.types;
+  default_type  application/octet-stream;
+  sendfile      on;
+  tcp_nopush    on;
+  tcp_nodelay   on;
+  keepalive_timeout  65;
+  server_tokens off;
+
+  access_log /var/log/nginx/access.log main;
+
+  gzip on;
+  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss image/svg+xml;
+
+  include /etc/nginx/conf.d/*.conf;
+}
diff --git a/docs/deploy/README_VPS.md b/docs/deploy/README_VPS.md
new file mode 100644
index 0000000000000000000000000000000000000000..9aa7319af862b09ee95d30533969ec5b5bcdbd33
--- /dev/null
+++ b/docs/deploy/README_VPS.md
@@ -0,0 +1,93 @@
+# Despliegue en VPS (Ubuntu 22.04/24.04)
+
+Esta guía describe cómo desplegar el proyecto **Juegos** en un servidor VPS con Ubuntu 22.04 o 24.04 utilizando Docker Compose y Nginx como proxy inverso.
+
+## Requisitos
+- VPS con Ubuntu 22.04 o 24.04
+- Dominio apuntando a la IP (opcional)
+- Puertos abiertos: 80 (HTTP) y 443 (HTTPS) si se configurará TLS más adelante
+
+## Crear usuario `deployer` y hardening básico
+```bash
+sudo adduser deployer
+sudo usermod -aG sudo deployer
+sudo -iu deployer
+```
+
+## Instalar Docker y Docker Compose
+```bash
+sudo apt-get update -y
+sudo apt-get install -y ca-certificates curl gnupg
+sudo install -m 0755 -d /etc/apt/keyrings
+curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
+echo \
+  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
+  $(. /etc/os-release && echo $VERSION_CODENAME) stable" | \
+  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
+sudo apt-get update -y
+sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
+sudo usermod -aG docker $USER
+newgrp docker
+docker --version
+docker compose version
+```
+
+## Clonar el repositorio y preparar el entorno
+```bash
+cd ~
+git clone https://github.com/jokbatllc/Juegos.git
+cd Juegos
+cp .env.example .env
+# Editar .env con valores reales (SECRET_KEY, ALLOWED_HOSTS, DB_PASSWORD fuerte, DJANGO_DEBUG=0)
+```
+
+## Arranque en producción con Nginx
+```bash
+docker compose -f docker-compose.prod.yml --env-file .env up --build -d
+docker compose -f docker-compose.prod.yml ps
+```
+
+## Crear superusuario
+```bash
+docker compose -f docker-compose.prod.yml exec web python manage.py createsuperuser
+```
+
+## Healthcheck
+- Abrir `http://TU_IP/health/` → debe responder `ok`
+- Abrir `http://TU_IP/` → debe cargar la aplicación
+
+## Logs y mantenimiento
+```bash
+docker compose -f docker-compose.prod.yml logs -f nginx
+docker compose -f docker-compose.prod.yml logs -f web
+docker compose -f docker-compose.prod.yml exec web python manage.py migrate
+docker compose -f docker-compose.prod.yml down
+```
+
+## Firewall UFW (opcional)
+```bash
+sudo apt-get install -y ufw
+sudo ufw allow OpenSSH
+sudo ufw allow 80/tcp
+# sudo ufw allow 443/tcp  # si pondrás TLS
+sudo ufw enable
+sudo ufw status
+```
+
+## SSL/TLS (opcional)
+- Opciones: Caddy (auto-TLS), nginx-proxy + acme-companion, o certbot en el host.
+- Ajustar Nginx y la variable `SECURE_PROXY_SSL_HEADER` ya contemplada en la configuración.
+
+## Servicio systemd
+Para arrancar el stack automáticamente tras un reinicio:
+```bash
+sudo cp docs/deploy/juegos.service /etc/systemd/system/juegos.service
+sudo systemctl daemon-reload
+sudo systemctl enable juegos
+sudo systemctl start juegos
+sudo systemctl status juegos --no-pager
+```
+
+---
+
+¡Listo! La aplicación quedará disponible en `http://TU_IP/` (o el dominio configurado).
diff --git a/docs/deploy/juegos.service b/docs/deploy/juegos.service
new file mode 100644
index 0000000000000000000000000000000000000000..d2eb4a73c08f549df256a0503f8c2f711abbaa42
--- /dev/null
+++ b/docs/deploy/juegos.service
@@ -0,0 +1,17 @@
+[Unit]
+Description=Juegos Django (Docker Compose - prod)
+Requires=docker.service
+After=docker.service
+
+[Service]
+Type=oneshot
+WorkingDirectory=/home/deployer/Juegos
+ExecStart=/usr/bin/docker compose -f docker-compose.prod.yml --env-file .env up -d
+ExecStop=/usr/bin/docker compose -f docker-compose.prod.yml --env-file .env down
+RemainAfterExit=yes
+User=deployer
+Group=deployer
+TimeoutStartSec=0
+
+[Install]
+WantedBy=multi-user.target
diff --git a/juegos/__init__.py b/juegos/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b137891791fe96927ad78e64b0aad7bded08bdc
--- /dev/null
+++ b/juegos/__init__.py
@@ -0,0 +1 @@
+
diff --git a/juegos/asgi.py b/juegos/asgi.py
new file mode 100644
index 0000000000000000000000000000000000000000..a2f0bdc821e2f744d49cee9a355002aaa5a166c7
--- /dev/null
+++ b/juegos/asgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'juegos.settings')
+
+application = get_asgi_application()
diff --git a/juegos/settings.py b/juegos/settings.py
new file mode 100644
index 0000000000000000000000000000000000000000..755bb956675f9cc9d65af08f01496437854e988b
--- /dev/null
+++ b/juegos/settings.py
@@ -0,0 +1,106 @@
+import os
+from pathlib import Path
+
+from dotenv import load_dotenv
+
+load_dotenv()
+
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-key')
+DEBUG = bool(int(os.getenv('DJANGO_DEBUG', '1')))
+ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '*').split(',')
+SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
+USE_X_FORWARDED_HOST = True
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'core',
+    'lexicon',
+    'puzzles',
+    'crossword',
+    'wordsearch',
+    'coloring',
+    'calligraphy',
+    'sudoku',
+    'mandala',
+    'maze',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'juegos.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [BASE_DIR / 'templates'],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'juegos.wsgi.application'
+
+if os.getenv('DB_NAME'):
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.postgresql',
+            'NAME': os.getenv('DB_NAME'),
+            'USER': os.getenv('DB_USER', ''),
+            'PASSWORD': os.getenv('DB_PASSWORD', ''),
+            'HOST': os.getenv('DB_HOST', ''),
+            'PORT': os.getenv('DB_PORT', ''),
+        }
+    }
+else:
+    DATABASES = {
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': BASE_DIR / 'db.sqlite3',
+        }
+    }
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'
+    },
+    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
+]
+
+LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'es-es')
+TIME_ZONE = os.getenv('TIME_ZONE', 'Europe/Madrid')
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
+STATICFILES_DIRS = [BASE_DIR / 'static']
+STATIC_ROOT = BASE_DIR / 'staticfiles'
+
+MEDIA_URL = '/media/'
+MEDIA_ROOT = BASE_DIR / 'media'
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
diff --git a/juegos/urls.py b/juegos/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..e3671134a3764ebbfea4680752e1d3f3dabe20b6
--- /dev/null
+++ b/juegos/urls.py
@@ -0,0 +1,24 @@
+from django.conf import settings
+from django.conf.urls.static import static
+from django.contrib import admin
+from django.urls import include, path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', include('core.urls')),
+    path('lexicon/', include('lexicon.urls', namespace='lexicon')),
+    path('puzzles/', include('puzzles.urls', namespace='puzzles')),
+    path('crossword/', include('crossword.urls', namespace='crossword')),
+    path('sudoku/', include('sudoku.urls', namespace='sudoku')),
+    path('wordsearch/', include('wordsearch.urls', namespace='wordsearch')),
+    path('mandala/', include('mandala.urls', namespace='mandala')),
+    path('calligraphy/', include('calligraphy.urls', namespace='calligraphy')),
+    path('coloring/', include('coloring.urls', namespace='coloring')),
+    path('maze/', include('maze.urls', namespace='maze')),
+]
+
+if settings.DEBUG:
+    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
+
+handler403 = 'core.views.handler403'
diff --git a/juegos/wsgi.py b/juegos/wsgi.py
new file mode 100644
index 0000000000000000000000000000000000000000..4e1ed7aeb53ae2522320800bb178525636c067e2
--- /dev/null
+++ b/juegos/wsgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'juegos.settings')
+
+application = get_wsgi_application()
diff --git a/lexicon/__init__.py b/lexicon/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/lexicon/__init__.py
diff --git a/lexicon/admin.py b/lexicon/admin.py
new file mode 100644
index 0000000000000000000000000000000000000000..2066f6ba2ac44811c737f9ac152948c3f1d9a1b1
--- /dev/null
+++ b/lexicon/admin.py
@@ -0,0 +1,32 @@
+from django.contrib import admin
+from .models import Idioma, Categoria, Palabra, ListaPalabras
+
+
+@admin.register(Idioma)
+class IdiomaAdmin(admin.ModelAdmin):
+    list_display = ("code", "nombre")
+    search_fields = ("code", "nombre")
+
+
+@admin.register(Categoria)
+class CategoriaAdmin(admin.ModelAdmin):
+    list_display = ("nombre", "slug", "tipo_contenido")
+    search_fields = ("nombre", "slug")
+    list_filter = ("tipo_contenido",)
+    prepopulated_fields = {"slug": ("nombre",)}
+
+
+@admin.register(Palabra)
+class PalabraAdmin(admin.ModelAdmin):
+    list_display = ("texto", "idioma", "dificultad")
+    search_fields = ("texto",)
+    list_filter = ("idioma", "categorias", "dificultad")
+    filter_horizontal = ("categorias",)
+
+
+@admin.register(ListaPalabras)
+class ListaPalabrasAdmin(admin.ModelAdmin):
+    list_display = ("nombre", "idioma")
+    search_fields = ("nombre", "descripcion")
+    list_filter = ("idioma", "categorias")
+    filter_horizontal = ("categorias", "palabras")
diff --git a/lexicon/apps.py b/lexicon/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..f562d3460be51a101ce4728b055a4b4bbc8e0c04
--- /dev/null
+++ b/lexicon/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class LexiconConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'lexicon'
diff --git a/lexicon/datasets/de_sample.csv b/lexicon/datasets/de_sample.csv
new file mode 100644
index 0000000000000000000000000000000000000000..1499b4a6dd68774ec7c7498154ec41bc05ba71ab
--- /dev/null
+++ b/lexicon/datasets/de_sample.csv
@@ -0,0 +1,4 @@
+id,word,language
+1,de_word_1,de
+2,de_word_2,de
+3,de_word_3,de
diff --git a/lexicon/datasets/en_sample.csv b/lexicon/datasets/en_sample.csv
new file mode 100644
index 0000000000000000000000000000000000000000..5714c656c897b19a1425d9b1d217e2b547d6ada7
--- /dev/null
+++ b/lexicon/datasets/en_sample.csv
@@ -0,0 +1,4 @@
+id,word,language
+1,en_word_1,en
+2,en_word_2,en
+3,en_word_3,en
diff --git a/lexicon/datasets/es_sample.csv b/lexicon/datasets/es_sample.csv
new file mode 100644
index 0000000000000000000000000000000000000000..8a74b74728acaf1ce820e154d5abde2fe1a12f6b
--- /dev/null
+++ b/lexicon/datasets/es_sample.csv
@@ -0,0 +1,51 @@
+id,word,language
+1,amor,es
+2,arbol,es
+3,amigo,es
+4,barco,es
+5,casa,es
+6,coche,es
+7,comida,es
+8,corazon,es
+9,dado,es
+10,dia,es
+11,diente,es
+12,elefante,es
+13,escuela,es
+14,familia,es
+15,flor,es
+16,fuego,es
+17,gato,es
+18,guitarra,es
+19,hombre,es
+20,idea,es
+21,isla,es
+22,jardin,es
+23,juego,es
+24,leche,es
+25,luna,es
+26,mano,es
+27,mar,es
+28,mesa,es
+29,mujer,es
+30,mundo,es
+31,nino,es
+32,nube,es
+33,ojo,es
+34,pan,es
+35,perro,es
+36,piedra,es
+37,planta,es
+38,puerta,es
+39,queso,es
+40,rio,es
+41,sol,es
+42,taza,es
+43,techo,es
+44,tierra,es
+45,uva,es
+46,viento,es
+47,zapato,es
+48,zanahoria,es
+49,estrella,es
+50,cielo,es
diff --git a/lexicon/datasets/fr_sample.csv b/lexicon/datasets/fr_sample.csv
new file mode 100644
index 0000000000000000000000000000000000000000..cb41a7de6606091726a6aca26472022c018c15a0
--- /dev/null
+++ b/lexicon/datasets/fr_sample.csv
@@ -0,0 +1,4 @@
+id,word,language
+1,fr_word_1,fr
+2,fr_word_2,fr
+3,fr_word_3,fr
diff --git a/lexicon/forms.py b/lexicon/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..96440c96653cc4ad7d3971b990b3375930084203
--- /dev/null
+++ b/lexicon/forms.py
@@ -0,0 +1,74 @@
+from __future__ import annotations
+
+import json
+from django import forms
+from django.core.exceptions import ValidationError
+from django.utils.text import slugify
+
+from .models import Categoria, Idioma, ListaPalabras, Palabra
+
+
+class IdiomaForm(forms.ModelForm):
+    class Meta:
+        model = Idioma
+        fields = ["code", "nombre"]
+
+    def clean_code(self):
+        code = self.cleaned_data["code"].strip().lower()
+        if not (2 <= len(code) <= 5):
+            raise ValidationError("El código debe tener entre 2 y 5 caracteres")
+        return code
+
+
+class CategoriaForm(forms.ModelForm):
+    class Meta:
+        model = Categoria
+        fields = ["nombre", "slug", "tipo_contenido"]
+
+    def clean_slug(self):
+        slug = self.cleaned_data.get("slug")
+        if not slug:
+            slug = slugify(self.cleaned_data.get("nombre", ""))
+        return slug
+
+
+class PalabraForm(forms.ModelForm):
+    class Meta:
+        model = Palabra
+        fields = ["texto", "idioma", "dificultad", "categorias", "tags"]
+        widgets = {"categorias": forms.CheckboxSelectMultiple}
+
+    def clean_texto(self):
+        return self.cleaned_data["texto"].strip().lower()
+
+    def clean_tags(self):
+        value = self.cleaned_data.get("tags")
+        if not value:
+            return {}
+        if isinstance(value, dict):
+            return value
+        try:
+            return json.loads(value)
+        except json.JSONDecodeError as exc:
+            raise ValidationError("JSON inválido") from exc
+
+
+class ListaPalabrasForm(forms.ModelForm):
+    class Meta:
+        model = ListaPalabras
+        fields = ["nombre", "descripcion", "idioma", "categorias", "palabras"]
+        widgets = {
+            "categorias": forms.CheckboxSelectMultiple,
+            "palabras": forms.SelectMultiple,
+        }
+
+
+class ImportCSVForm(forms.Form):
+    TIPO_CHOICES = [("palabras", "Palabras"), ("categorias", "Categorías")]
+
+    archivo = forms.FileField()
+    tipo = forms.ChoiceField(choices=TIPO_CHOICES)
+    idioma = forms.ModelChoiceField(queryset=Idioma.objects.all(), required=False)
+    columnas = forms.CharField(required=False, help_text="texto,categorias,dificultad,tags")
+    separador = forms.CharField(max_length=1, initial=",")
+    tiene_encabezados = forms.BooleanField(required=False, initial=True)
diff --git a/lexicon/generate_dataset.py b/lexicon/generate_dataset.py
new file mode 100644
index 0000000000000000000000000000000000000000..16296b8cbc4d6f03993a51e04d7e9f9bd090b44d
--- /dev/null
+++ b/lexicon/generate_dataset.py
@@ -0,0 +1,51 @@
+"""Utility script to generate large word datasets per language.
+
+Creates CSV files with 10,000 synthetic words for Spanish, English,
+French and German. Each file has three columns: ``id``, ``word`` and
+``language``. Files are written under ``datasets/`` and overwritten on each
+run.
+"""
+
+from __future__ import annotations
+
+import csv
+from pathlib import Path
+
+# Number of words per language
+COUNT = 10_000
+
+# Language names and a few sample base words to seed the dataset
+LANG_CONFIG = {
+    "es": ["gato", "perro", "casa", "libro", "coche"],
+    "en": ["cat", "dog", "house", "book", "car"],
+    "fr": ["chat", "chien", "maison", "livre", "voiture"],
+    "de": ["katze", "hund", "haus", "buch", "auto"],
+}
+
+DATASET_DIR = Path(__file__).resolve().parent / "datasets"
+
+
+def generate_words(lang: str, samples: list[str]):
+    """Yield ``(id, word, language)`` tuples for the given language."""
+    for i in range(1, COUNT + 1):
+        if i <= len(samples):
+            word = samples[i - 1]
+        else:
+            word = f"{lang}_word_{i:05d}"
+        yield i, word, lang
+
+
+def main() -> None:
+    DATASET_DIR.mkdir(parents=True, exist_ok=True)
+
+    for lang, samples in LANG_CONFIG.items():
+        file_path = DATASET_DIR / f"{lang}_words.csv"
+        with file_path.open("w", newline="", encoding="utf-8") as fh:
+            writer = csv.writer(fh)
+            writer.writerow(["id", "word", "language"])
+            writer.writerows(generate_words(lang, samples))
+        print(f"Wrote {COUNT} words to {file_path}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/lexicon/management/__init__.py b/lexicon/management/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/lexicon/management/__init__.py
diff --git a/lexicon/management/commands/__init__.py b/lexicon/management/commands/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/lexicon/management/commands/__init__.py
diff --git a/lexicon/management/commands/gen_words.py b/lexicon/management/commands/gen_words.py
new file mode 100644
index 0000000000000000000000000000000000000000..9cf0222279c8d74be30f2ad71e6d8eade0b65700
--- /dev/null
+++ b/lexicon/management/commands/gen_words.py
@@ -0,0 +1,86 @@
+import csv
+import random
+from pathlib import Path
+
+from django.core.management.base import BaseCommand
+
+WORDS = {
+    'es': [
+        'casa',
+        'perro',
+        'gato',
+        'arbol',
+        'nino',
+        'coche',
+        'playa',
+        'montana',
+        'rio',
+        'sol',
+        'luna',
+        'flor',
+        'libro',
+        'pan',
+        'vino',
+    ]
+    * 800,
+    'en': [
+        'house',
+        'dog',
+        'cat',
+        'tree',
+        'child',
+        'car',
+        'beach',
+        'mountain',
+        'river',
+        'sun',
+        'moon',
+        'flower',
+        'book',
+        'bread',
+        'wine',
+    ]
+    * 800,
+    'fr': [
+        'maison',
+        'chien',
+        'chat',
+        'arbre',
+        'enfant',
+        'voiture',
+        'plage',
+        'montagne',
+        'riviere',
+        'soleil',
+        'lune',
+        'fleur',
+        'livre',
+        'pain',
+        'vin',
+    ]
+    * 800,
+}
+
+
+class Command(BaseCommand):
+    help = "Genera CSV de 10k palabras por idioma en lexicon/datasets/auto_{lang}_{size}.csv"
+
+    def add_arguments(self, parser):
+        parser.add_argument('--langs', default='es,en,fr')
+        parser.add_argument('--size', type=int, default=10000)
+
+    def handle(self, *args, **opts):
+        langs = opts['langs'].split(',')
+        size = opts['size']
+        outdir = Path('lexicon/datasets')
+        outdir.mkdir(parents=True, exist_ok=True)
+        for lang in langs:
+            pool = WORDS.get(lang, WORDS['es'])
+            data = [random.choice(pool) for _ in range(size)]
+            path = outdir / f'auto_{lang}_{size}.csv'
+            with path.open('w', newline='', encoding='utf-8') as f:
+                w = csv.writer(f)
+                w.writerow(['word', 'lang'])
+                for wv in data:
+                    w.writerow([wv, lang])
+            self.stdout.write(self.style.SUCCESS(f'Creado {path}'))
diff --git a/lexicon/management/commands/import_words.py b/lexicon/management/commands/import_words.py
new file mode 100644
index 0000000000000000000000000000000000000000..d33049b12a59685e19faa91a5c81a4d9a0043398
--- /dev/null
+++ b/lexicon/management/commands/import_words.py
@@ -0,0 +1,63 @@
+from __future__ import annotations
+
+import csv
+from pathlib import Path
+
+from django.core.management.base import BaseCommand, CommandError
+
+from ...models import Word
+
+LANG_CODES = {"es", "en", "fr", "de"}
+
+DATASET_DIR = Path(__file__).resolve().parents[3] / "lexicon" / "datasets"
+
+
+class Command(BaseCommand):
+    """Import words from CSV files into the :class:`Word` model."""
+
+    help = "Import CSV datasets generated by scripts/generate_dataset.py"
+
+    def add_arguments(self, parser) -> None:  # pragma: no cover - simple
+        parser.add_argument(
+            "--file",
+            help="Import a specific CSV file instead of the bundled samples",
+        )
+
+    def handle(self, *args, **options):
+        csv_path = options.get("file")
+        if csv_path:
+            files = [Path(csv_path)]
+            if not Path(csv_path).exists():
+                raise CommandError(f"File not found: {csv_path}")
+        else:
+            if not DATASET_DIR.exists():
+                self.stderr.write(f"No dataset directory found at {DATASET_DIR}")
+                return
+            files = sorted(DATASET_DIR.glob("*_sample.csv"))
+            if not files:
+                self.stderr.write("No sample datasets found")
+                return
+
+        totals: dict[str, int] = {}
+
+        for csv_file in files:
+            prefix = csv_file.stem.split("_")[0]
+            lang = prefix if prefix in LANG_CODES else None
+            with csv_file.open(encoding="utf-8") as fh:
+                reader = csv.DictReader(fh)
+                for row in reader:
+                    word = row.get("word", "").strip()
+                    if not word:
+                        continue
+                    language = row.get("language") or lang
+                    if language not in LANG_CODES:
+                        continue
+                    _, created = Word.objects.get_or_create(
+                        word=word, defaults={"language": language}
+                    )
+                    if created:
+                        totals[language] = totals.get(language, 0) + 1
+
+        for code, count in sorted(totals.items()):
+            self.stdout.write(f"{code}: {count} imported")
+        self.stdout.write(self.style.SUCCESS("Import completed"))
diff --git a/lexicon/management/commands/load_lexicon_seed.py b/lexicon/management/commands/load_lexicon_seed.py
new file mode 100644
index 0000000000000000000000000000000000000000..f10dd61a98c816159ff4467c8d44c3cda5eddf77
--- /dev/null
+++ b/lexicon/management/commands/load_lexicon_seed.py
@@ -0,0 +1,122 @@
+import json
+from pathlib import Path
+
+from django.core.management.base import BaseCommand
+
+from lexicon.models import Categoria, Idioma, Palabra
+
+
+class Command(BaseCommand):
+    help = "Carga palabras desde un archivo JSON o JSONL"
+
+    def add_arguments(self, parser):
+        parser.add_argument(
+            "--path",
+            type=str,
+            default="lexicon/fixtures/lexicon_seed.json",
+            help="Ruta del archivo JSON/JSONL a cargar",
+        )
+        parser.add_argument(
+            "--batch-size",
+            type=int,
+            default=1000,
+            help="Tamaño de lote para bulk_create",
+        )
+        parser.add_argument(
+            "--dry-run",
+            action="store_true",
+            help="No inserta datos, solo muestra lo que haría",
+        )
+
+    def handle(self, *args, **options):
+        path = Path(options["path"])
+        batch_size = options["batch_size"]
+        dry_run = options["dry_run"]
+
+        if not path.exists():
+            self.stderr.write(self.style.ERROR(f"Archivo {path} no encontrado"))
+            return
+
+        def iter_records():
+            if path.suffix == ".jsonl":
+                with open(path, "r", encoding="utf-8") as fh:
+                    for line in fh:
+                        line = line.strip()
+                        if line:
+                            yield json.loads(line)
+            else:
+                with open(path, "r", encoding="utf-8") as fh:
+                    data = json.load(fh)
+                    for item in data:
+                        yield item
+
+        existing_pairs = set(
+            Palabra.objects.values_list("texto", "idioma__code")
+        )
+        languages = {}
+        categories = {}
+        through_model = Palabra.categorias.through
+        batch = []
+        inserted = 0
+
+        for rec in iter_records():
+            texto = rec.get("texto", "").strip().lower()
+            code = rec.get("idioma")
+            if not texto or not code:
+                continue
+            if (texto, code) in existing_pairs:
+                continue
+            lang = languages.get(code)
+            if not lang:
+                lang, _ = Idioma.objects.get_or_create(
+                    code=code, defaults={"nombre": code}
+                )
+                languages[code] = lang
+            cat_objs = []
+            for slug in rec.get("categorias", []):
+                cat = categories.get(slug)
+                if not cat:
+                    cat, _ = Categoria.objects.get_or_create(
+                        slug=slug,
+                        defaults={
+                            "nombre": slug,
+                            "tipo_contenido": "wordsearch",
+                        },
+                    )
+                    categories[slug] = cat
+                cat_objs.append(cat)
+            word = Palabra(
+                texto=texto,
+                idioma=lang,
+                dificultad=rec.get("dificultad", 1),
+                tags=rec.get("tags"),
+            )
+            batch.append((word, cat_objs))
+            existing_pairs.add((texto, code))
+            if len(batch) >= batch_size:
+                if not dry_run:
+                    self._flush(batch, batch_size, through_model)
+                inserted += len(batch)
+                batch = []
+
+        if batch:
+            if not dry_run:
+                self._flush(batch, batch_size, through_model)
+            inserted += len(batch)
+
+        action = "Procesarían" if dry_run else "Insertadas"
+        self.stdout.write(
+            self.style.SUCCESS(f"{action} {inserted} palabras desde {path}")
+        )
+
+    def _flush(self, batch, batch_size, through_model):
+        created_words = Palabra.objects.bulk_create(
+            [w for w, _ in batch], batch_size=batch_size
+        )
+        relations = []
+        for word_obj, (_, cats) in zip(created_words, batch):
+            for cat in cats:
+                relations.append(
+                    through_model(palabra_id=word_obj.id, categoria_id=cat.id)
+                )
+        through_model.objects.bulk_create(relations, batch_size=batch_size)
diff --git a/lexicon/management/commands/seed_lexicon.py b/lexicon/management/commands/seed_lexicon.py
new file mode 100644
index 0000000000000000000000000000000000000000..1a129bbf8750207c12cd162f006366c0b255baed
--- /dev/null
+++ b/lexicon/management/commands/seed_lexicon.py
@@ -0,0 +1,265 @@
+import json
+import random
+from collections import deque
+from pathlib import Path
+from time import perf_counter
+
+from django.core.management.base import BaseCommand
+from django.utils.text import slugify
+
+from lexicon.models import Categoria, Idioma, Palabra
+
+
+class Command(BaseCommand):
+    help = "Inserta datos masivos de palabras en la base de datos"
+
+    def add_arguments(self, parser):
+        parser.add_argument(
+            "--per-lang",
+            type=int,
+            default=10000,
+            help="Número de palabras por idioma",
+        )
+        parser.add_argument(
+            "--langs",
+            type=str,
+            default="es,en,fr",
+            help="Códigos de idioma separados por comas",
+        )
+        parser.add_argument(
+            "--batch-size",
+            type=int,
+            default=1000,
+            help="Tamaño de lote para bulk_create",
+        )
+        parser.add_argument(
+            "--dry-run",
+            action="store_true",
+            help="No inserta datos, solo muestra lo que haría",
+        )
+        parser.add_argument(
+            "--dump-json",
+            type=str,
+            help="Ruta opcional para volcar los datos en JSON/JSONL",
+        )
+        parser.add_argument(
+            "--force",
+            action="store_true",
+            help="Borra palabras existentes antes de insertar",
+        )
+
+    def handle(self, *args, **options):
+        per_lang = options["per_lang"]
+        batch_size = options["batch_size"]
+        langs = [code.strip() for code in options["langs"].split(",") if code.strip()]
+        dry_run = options["dry_run"]
+        dump_path = options.get("dump_json")
+        force = options["force"]
+
+        if dry_run:
+            total = per_lang * len(langs)
+            self.stdout.write(self.style.NOTICE("Modo dry-run"))
+            self.stdout.write(f"Idiomas: {', '.join(langs)}")
+            self.stdout.write(f"Se crearían {per_lang} palabras por idioma ({total} en total)")
+            if dump_path:
+                self.stdout.write(f"Se generaría además un dump en {dump_path}")
+            return
+
+        start_total = perf_counter()
+
+        # Fase 1: creación de idiomas y categorías
+        t0 = perf_counter()
+        lang_defs = {
+            "es": "Español",
+            "en": "English",
+            "fr": "Français",
+        }
+        lang_objs = {}
+        for code in langs:
+            name = lang_defs.get(code, code)
+            lang_obj, _ = Idioma.objects.get_or_create(
+                code=code, defaults={"nombre": name}
+            )
+            lang_objs[code] = lang_obj
+
+        category_names = [
+            "animales",
+            "comida",
+            "deporte",
+            "tecnologia",
+            "naturaleza",
+            "ciudades",
+            "escuela",
+            "musica",
+            "colores",
+            "profesiones",
+        ]
+        tipo_choices = [
+            "wordsearch",
+            "crossword",
+            "coloring_kids",
+            "coloring_adults",
+            "calligraphy",
+            "sudoku",
+            "mandala",
+        ]
+        categories = []
+        for i, name in enumerate(category_names):
+            slug = slugify(name)
+            tipo = tipo_choices[i % len(tipo_choices)]
+            cat, _ = Categoria.objects.get_or_create(
+                slug=slug, defaults={"nombre": name, "tipo_contenido": tipo}
+            )
+            categories.append(cat)
+        t1 = perf_counter()
+        setup_time = t1 - t0
+
+        total_inserted = {}
+        gen_time = 0.0
+        insert_time = 0.0
+        dump_records = []
+
+        through_model = Palabra.categorias.through
+
+        real_words = {
+            "es": deque(
+                [
+                    "perro",
+                    "gato",
+                    "manzana",
+                    "futbol",
+                    "computadora",
+                    "bosque",
+                    "madrid",
+                    "escuela",
+                    "guitarra",
+                    "rojo",
+                ]
+            ),
+            "en": deque(
+                [
+                    "dog",
+                    "cat",
+                    "apple",
+                    "soccer",
+                    "computer",
+                    "forest",
+                    "london",
+                    "school",
+                    "guitar",
+                    "red",
+                ]
+            ),
+            "fr": deque(
+                [
+                    "chien",
+                    "chat",
+                    "pomme",
+                    "football",
+                    "ordinateur",
+                    "foret",
+                    "paris",
+                    "ecole",
+                    "guitare",
+                    "rouge",
+                ]
+            ),
+        }
+        synthetic_counters = {code: 1 for code in langs}
+
+        for code in langs:
+            lang_obj = lang_objs[code]
+            existing = Palabra.objects.filter(idioma=lang_obj).count()
+            if existing and not force:
+                self.stdout.write(
+                    self.style.WARNING(
+                        f"{code}: {existing} palabras existentes, omitiendo (use --force para recrear)"
+                    )
+                )
+                total_inserted[code] = 0
+                continue
+            if existing and force:
+                self.stdout.write(f"{code}: eliminando {existing} palabras existentes...")
+                Palabra.objects.filter(idioma=lang_obj).delete()
+
+            count_inserted_lang = 0
+            words_generated = 0
+
+            while words_generated < per_lang:
+                batch_words = []
+                batch_cat_links = []
+                batch_start_gen = perf_counter()
+                for _ in range(min(batch_size, per_lang - words_generated)):
+                    cats = random.sample(categories, random.randint(1, 3))
+                    prefix = cats[0].slug
+                    rw_queue = real_words.get(code)
+                    if rw_queue and rw_queue:
+                        base = rw_queue.popleft()
+                        text = f"{prefix}_{base}".lower()
+                    else:
+                        idx = synthetic_counters[code]
+                        synthetic_counters[code] += 1
+                        text = f"{code}_{prefix}_{idx:06d}"
+                    difficulty = random.randint(1, 5)
+                    tags = None
+                    if random.random() < 0.3:
+                        tags = {"tema": prefix}
+                    word = Palabra(texto=text, idioma=lang_obj, dificultad=difficulty, tags=tags)
+                    batch_words.append((word, cats))
+                batch_gen_time = perf_counter() - batch_start_gen
+                gen_time += batch_gen_time
+
+                batch_start_insert = perf_counter()
+                created_words = Palabra.objects.bulk_create(
+                    [bw[0] for bw in batch_words], batch_size=batch_size
+                )
+                through_objects = []
+                for word_obj, cats in zip(created_words, [bw[1] for bw in batch_words]):
+                    for c in cats:
+                        through_objects.append(
+                            through_model(palabra_id=word_obj.id, categoria_id=c.id)
+                        )
+                    if dump_path:
+                        dump_records.append(
+                            {
+                                "texto": word_obj.texto,
+                                "idioma": code,
+                                "dificultad": word_obj.dificultad,
+                                "categorias": [c.slug for c in cats],
+                                "tags": word_obj.tags,
+                            }
+                        )
+                through_model.objects.bulk_create(through_objects, batch_size=batch_size)
+                batch_insert_time = perf_counter() - batch_start_insert
+                insert_time += batch_insert_time
+
+                inserted = len(created_words)
+                words_generated += inserted
+                count_inserted_lang += inserted
+
+            total_inserted[code] = count_inserted_lang
+
+        if dump_path:
+            dump_dir = Path(dump_path).parent
+            dump_dir.mkdir(parents=True, exist_ok=True)
+            if dump_path.endswith(".jsonl"):
+                with open(dump_path, "w", encoding="utf-8") as fh:
+                    for record in dump_records:
+                        fh.write(json.dumps(record, ensure_ascii=False) + "\n")
+            else:
+                with open(dump_path, "w", encoding="utf-8") as fh:
+                    json.dump(dump_records, fh, ensure_ascii=False)
+            self.stdout.write(self.style.SUCCESS(f"Dump guardado en {dump_path}"))
+
+        total_time = perf_counter() - start_total
+
+        self.stdout.write("Resumen de inserciones:")
+        for code, count in total_inserted.items():
+            self.stdout.write(f"  {code}: {count}")
+        self.stdout.write(f"Total: {sum(total_inserted.values())}")
+        self.stdout.write("Tiempos:")
+        self.stdout.write(f"  setup: {setup_time:.2f}s")
+        self.stdout.write(f"  generar: {gen_time:.2f}s")
+        self.stdout.write(f"  insertar: {insert_time:.2f}s")
+        self.stdout.write(f"  total: {total_time:.2f}s")
+
diff --git a/lexicon/migrations/0001_initial.py b/lexicon/migrations/0001_initial.py
new file mode 100644
index 0000000000000000000000000000000000000000..c3f4d4e999dfd2540aca6d2ca8d6f2d2d982adb3
--- /dev/null
+++ b/lexicon/migrations/0001_initial.py
@@ -0,0 +1,135 @@
+# Generated by Django 5.2.5 on 2025-08-25 11:32
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Idioma",
+            fields=[
+                (
+                    "code",
+                    models.CharField(max_length=10, primary_key=True, serialize=False),
+                ),
+                ("nombre", models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Categoria",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("nombre", models.CharField(max_length=100, unique=True)),
+                ("slug", models.SlugField(unique=True)),
+                (
+                    "tipo_contenido",
+                    models.CharField(
+                        choices=[
+                            ("crossword", "Crossword"),
+                            ("wordsearch", "Wordsearch"),
+                            ("coloring_kids", "Coloring Kids"),
+                            ("coloring_adults", "Coloring Adults"),
+                            ("calligraphy", "Calligraphy"),
+                            ("sudoku", "Sudoku"),
+                            ("mandala", "Mandala"),
+                        ],
+                        max_length=20,
+                    ),
+                ),
+            ],
+            options={
+                "indexes": [
+                    models.Index(fields=["slug"], name="lexicon_cat_slug_fce4d4_idx")
+                ],
+            },
+        ),
+        migrations.CreateModel(
+            name="Palabra",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("texto", models.CharField(max_length=255)),
+                ("dificultad", models.PositiveSmallIntegerField(default=1)),
+                ("tags", models.JSONField(blank=True, null=True)),
+                (
+                    "categorias",
+                    models.ManyToManyField(
+                        blank=True, related_name="palabras", to="lexicon.categoria"
+                    ),
+                ),
+                (
+                    "idioma",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE, to="lexicon.idioma"
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="ListaPalabras",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("nombre", models.CharField(max_length=255)),
+                ("descripcion", models.TextField(blank=True)),
+                (
+                    "categorias",
+                    models.ManyToManyField(
+                        blank=True, related_name="listas", to="lexicon.categoria"
+                    ),
+                ),
+                (
+                    "idioma",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE, to="lexicon.idioma"
+                    ),
+                ),
+                (
+                    "palabras",
+                    models.ManyToManyField(
+                        blank=True, related_name="listas", to="lexicon.palabra"
+                    ),
+                ),
+            ],
+        ),
+        migrations.AddIndex(
+            model_name="palabra",
+            index=models.Index(
+                fields=["texto", "idioma"], name="lexicon_pal_texto_fb8373_idx"
+            ),
+        ),
+        migrations.AddConstraint(
+            model_name="palabra",
+            constraint=models.UniqueConstraint(
+                fields=("texto", "idioma"), name="unique_texto_idioma"
+            ),
+        ),
+    ]
diff --git a/lexicon/migrations/0002_word.py b/lexicon/migrations/0002_word.py
new file mode 100644
index 0000000000000000000000000000000000000000..34d9d9352452083e39dfd887b87e781dc6c300d5
--- /dev/null
+++ b/lexicon/migrations/0002_word.py
@@ -0,0 +1,40 @@
+# Generated by Django 5.2.5 on 2025-08-25 14:18
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('lexicon', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Word',
+            fields=[
+                (
+                    'id',
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name='ID',
+                    ),
+                ),
+                ('word', models.CharField(db_index=True, max_length=255, unique=True)),
+                (
+                    'language',
+                    models.CharField(
+                        choices=[
+                            ('es', 'Spanish'),
+                            ('en', 'English'),
+                            ('fr', 'French'),
+                            ('de', 'German'),
+                        ],
+                        max_length=2,
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/lexicon/migrations/__init__.py b/lexicon/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/lexicon/migrations/__init__.py
diff --git a/lexicon/models.py b/lexicon/models.py
new file mode 100644
index 0000000000000000000000000000000000000000..4c7093f1ec757cfae4c0fea8ee0130382c4aedc2
--- /dev/null
+++ b/lexicon/models.py
@@ -0,0 +1,80 @@
+from django.db import models
+
+
+class Idioma(models.Model):
+    code = models.CharField(primary_key=True, max_length=10)
+    nombre = models.CharField(max_length=100)
+
+    def __str__(self) -> str:
+        return self.nombre
+
+
+class Categoria(models.Model):
+    TIPO_CHOICES = [
+        ("crossword", "Crossword"),
+        ("wordsearch", "Wordsearch"),
+        ("coloring_kids", "Coloring Kids"),
+        ("coloring_adults", "Coloring Adults"),
+        ("calligraphy", "Calligraphy"),
+        ("sudoku", "Sudoku"),
+        ("mandala", "Mandala"),
+    ]
+
+    nombre = models.CharField(max_length=100, unique=True)
+    slug = models.SlugField(unique=True)
+    tipo_contenido = models.CharField(max_length=20, choices=TIPO_CHOICES)
+
+    class Meta:
+        indexes = [
+            models.Index(fields=["slug"]),
+        ]
+
+    def __str__(self) -> str:
+        return self.nombre
+
+
+class Palabra(models.Model):
+    texto = models.CharField(max_length=255)
+    idioma = models.ForeignKey(Idioma, on_delete=models.CASCADE)
+    dificultad = models.PositiveSmallIntegerField(default=1)
+    tags = models.JSONField(null=True, blank=True)
+    categorias = models.ManyToManyField(Categoria, related_name="palabras", blank=True)
+
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(
+                fields=["texto", "idioma"], name="unique_texto_idioma"
+            ),
+        ]
+        indexes = [
+            models.Index(fields=["texto", "idioma"]),
+        ]
+
+    def __str__(self) -> str:
+        return self.texto
+
+
+class ListaPalabras(models.Model):
+    nombre = models.CharField(max_length=255)
+    descripcion = models.TextField(blank=True)
+    idioma = models.ForeignKey(Idioma, on_delete=models.CASCADE)
+    categorias = models.ManyToManyField(Categoria, related_name="listas", blank=True)
+    palabras = models.ManyToManyField(Palabra, related_name="listas", blank=True)
+
+    def __str__(self) -> str:
+        return self.nombre
+
+
+class Word(models.Model):
+    LANG_CHOICES = [
+        ("es", "Spanish"),
+        ("en", "English"),
+        ("fr", "French"),
+        ("de", "German"),
+    ]
+
+    word = models.CharField(max_length=255, unique=True, db_index=True)
+    language = models.CharField(max_length=2, choices=LANG_CHOICES)
+
+    def __str__(self) -> str:  # pragma: no cover - trivial
+        return self.word
diff --git a/lexicon/templates/lexicon/base_lexicon.html b/lexicon/templates/lexicon/base_lexicon.html
new file mode 100644
index 0000000000000000000000000000000000000000..4cf8564f985343496a4764d18d62c4f01df9437a
--- /dev/null
+++ b/lexicon/templates/lexicon/base_lexicon.html
@@ -0,0 +1,2 @@
+{% extends "base.html" %}
+{% block content %}{% block content_lexicon %}{% endblock %}{% endblock %}
diff --git a/lexicon/templates/lexicon/categoria_list.html b/lexicon/templates/lexicon/categoria_list.html
new file mode 100644
index 0000000000000000000000000000000000000000..86fdd7d70bcc95a58d535115ec5922198a1f2030
--- /dev/null
+++ b/lexicon/templates/lexicon/categoria_list.html
@@ -0,0 +1,40 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Categorías · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Categorías</div>
+    <a class="btn btn-primary" href="{% url 'lexicon:categoria_create' %}">Nueva</a>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="get" class="field">
+  <input type="text" name="q" value="{{ q }}" placeholder="Buscar">
+  <button class="btn">Buscar</button>
+</form>
+<table class="table">
+  <tr><th>Nombre</th><th>Slug</th><th>Tipo</th><th></th></tr>
+  {% for obj in page_obj %}
+  <tr>
+    <td>{{ obj.nombre }}</td>
+    <td>{{ obj.slug }}</td>
+    <td>{{ obj.get_tipo_contenido_display }}</td>
+    <td>
+      <a href="{% url 'lexicon:categoria_edit' obj.pk %}" class="btn btn-sm">Editar</a>
+      <form action="{% url 'lexicon:categoria_delete' obj.pk %}" method="post" style="display:inline">
+        {% csrf_token %}
+        <button class="btn btn-sm btn-danger">Eliminar</button>
+      </form>
+    </td>
+  </tr>
+  {% endfor %}
+</table>
+<p>Página {{ page_obj.number }} de {{ page_obj.paginator.num_pages }}</p>
+<div class="row">
+  <div class="col-6">
+    {% if page_obj.has_previous %}<a href="?page={{ page_obj.previous_page_number }}&q={{ q }}" class="btn btn-sm">Anterior</a>{% endif %}
+  </div>
+  <div class="col-6">
+    {% if page_obj.has_next %}<a href="?page={{ page_obj.next_page_number }}&q={{ q }}" class="btn btn-sm">Siguiente</a>{% endif %}
+  </div>
+</div>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/confirm_delete.html b/lexicon/templates/lexicon/confirm_delete.html
new file mode 100644
index 0000000000000000000000000000000000000000..94b58641a9f4297ddcd6308fd6094e4ef2d1e223
--- /dev/null
+++ b/lexicon/templates/lexicon/confirm_delete.html
@@ -0,0 +1,10 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Eliminar {{ obj }} · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">¿Eliminar {{ obj }}?</div>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="post">{% csrf_token %}<button class="btn btn-danger">Confirmar</button></form>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/form.html b/lexicon/templates/lexicon/form.html
new file mode 100644
index 0000000000000000000000000000000000000000..b0f513a04510cb83c7cd7edc0b3b9252043c031c
--- /dev/null
+++ b/lexicon/templates/lexicon/form.html
@@ -0,0 +1,20 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}{{ titulo }} · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">{{ titulo }}</div>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary">Guardar</button>
+</form>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/idioma_list.html b/lexicon/templates/lexicon/idioma_list.html
new file mode 100644
index 0000000000000000000000000000000000000000..7dcbf7739e7178cdb8db5f1f0e3840ad5ff4790b
--- /dev/null
+++ b/lexicon/templates/lexicon/idioma_list.html
@@ -0,0 +1,39 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Idiomas · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Idiomas</div>
+    <a class="btn btn-primary" href="{% url 'lexicon:idioma_create' %}">Nuevo</a>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="get" class="field">
+  <input type="text" name="q" value="{{ q }}" placeholder="Buscar">
+  <button class="btn">Buscar</button>
+</form>
+<table class="table">
+  <tr><th>Código</th><th>Nombre</th><th></th></tr>
+  {% for obj in page_obj %}
+  <tr>
+    <td>{{ obj.code }}</td>
+    <td>{{ obj.nombre }}</td>
+    <td>
+      <a href="{% url 'lexicon:idioma_edit' obj.code %}" class="btn btn-sm">Editar</a>
+      <form action="{% url 'lexicon:idioma_delete' obj.code %}" method="post" style="display:inline">
+        {% csrf_token %}
+        <button class="btn btn-sm btn-danger">Eliminar</button>
+      </form>
+    </td>
+  </tr>
+  {% endfor %}
+</table>
+<p>Página {{ page_obj.number }} de {{ page_obj.paginator.num_pages }}</p>
+<div class="row">
+  <div class="col-6">
+    {% if page_obj.has_previous %}<a href="?page={{ page_obj.previous_page_number }}&q={{ q }}" class="btn btn-sm">Anterior</a>{% endif %}
+  </div>
+  <div class="col-6">
+    {% if page_obj.has_next %}<a href="?page={{ page_obj.next_page_number }}&q={{ q }}" class="btn btn-sm">Siguiente</a>{% endif %}
+  </div>
+</div>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/import_csv.html b/lexicon/templates/lexicon/import_csv.html
new file mode 100644
index 0000000000000000000000000000000000000000..20bb573a100db0073fdc8e59e84509508545fd26
--- /dev/null
+++ b/lexicon/templates/lexicon/import_csv.html
@@ -0,0 +1,20 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Importar CSV · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Importar CSV</div>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="post" enctype="multipart/form-data">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary">Subir</button>
+</form>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/import_preview.html b/lexicon/templates/lexicon/import_preview.html
new file mode 100644
index 0000000000000000000000000000000000000000..8da9a3fcea7fefb09ae9519bdceaea27f0240917
--- /dev/null
+++ b/lexicon/templates/lexicon/import_preview.html
@@ -0,0 +1,16 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Vista previa · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Vista previa</div>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<table class="table">
+  {% for row in rows %}
+  {% if forloop.first %}<tr>{% for k,v in row.items %}<th>{{ k }}</th>{% endfor %}</tr>{% endif %}
+  <tr>{% for v in row.values %}<td>{{ v }}</td>{% endfor %}</tr>
+  {% endfor %}
+</table>
+<form method="post">{% csrf_token %}<button class="btn btn-primary">Confirmar</button></form>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/index.html b/lexicon/templates/lexicon/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..79cfe535d90d703f2c641cb52951170b2557d1a5
--- /dev/null
+++ b/lexicon/templates/lexicon/index.html
@@ -0,0 +1,16 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Lexicon · Juegos{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Lexicon</div>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<div class="row">
+  <div class="col-4"><a class="btn btn-primary" href="{% url 'lexicon:idioma_list' %}">Idiomas</a></div>
+  <div class="col-4"><a class="btn btn-primary" href="{% url 'lexicon:categoria_list' %}">Categorías</a></div>
+  <div class="col-4"><a class="btn btn-primary" href="{% url 'lexicon:palabra_list' %}">Palabras</a></div>
+  <div class="col-4"><a class="btn btn-primary" href="{% url 'lexicon:lista_list' %}">Listas</a></div>
+  <div class="col-4"><a class="btn btn-primary" href="{% url 'lexicon:import_csv' %}">Importar CSV</a></div>
+</div>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/lista_list.html b/lexicon/templates/lexicon/lista_list.html
new file mode 100644
index 0000000000000000000000000000000000000000..55d2a660bc973fd8b4d005aabdfb47cffe7b0b63
--- /dev/null
+++ b/lexicon/templates/lexicon/lista_list.html
@@ -0,0 +1,51 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Listas · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Listas de palabras</div>
+    <a class="btn btn-primary" href="{% url 'lexicon:lista_create' %}">Nueva</a>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="get">
+  <div class="field">
+    <input type="text" name="q" value="{{ q }}" placeholder="Buscar">
+  </div>
+  <div class="row">
+    <div class="col-4">
+      <div class="field">
+        <select name="idioma">
+          <option value="">Idioma</option>
+          {% for i in idiomas %}<option value="{{ i.code }}" {% if filtros.idioma == i.code %}selected{% endif %}>{{ i.code }}</option>{% endfor %}
+        </select>
+      </div>
+    </div>
+  </div>
+  <button class="btn">Filtrar</button>
+</form>
+<table class="table">
+  <tr><th>Nombre</th><th>Idioma</th><th></th></tr>
+  {% for obj in page_obj %}
+  <tr>
+    <td>{{ obj.nombre }}</td>
+    <td>{{ obj.idioma.code }}</td>
+    <td>
+      <a href="{% url 'lexicon:lista_edit' obj.pk %}" class="btn btn-sm">Editar</a>
+      <form action="{% url 'lexicon:lista_delete' obj.pk %}" method="post" style="display:inline">
+        {% csrf_token %}
+        <button class="btn btn-sm btn-danger">Eliminar</button>
+      </form>
+    </td>
+  </tr>
+  {% endfor %}
+</table>
+<p>Página {{ page_obj.number }} de {{ page_obj.paginator.num_pages }}</p>
+<div class="row">
+  <div class="col-6">
+    {% if page_obj.has_previous %}<a href="?page={{ page_obj.previous_page_number }}" class="btn btn-sm">Anterior</a>{% endif %}
+  </div>
+  <div class="col-6">
+    {% if page_obj.has_next %}<a href="?page={{ page_obj.next_page_number }}" class="btn btn-sm">Siguiente</a>{% endif %}
+  </div>
+</div>
+{% endblock %}
diff --git a/lexicon/templates/lexicon/palabra_list.html b/lexicon/templates/lexicon/palabra_list.html
new file mode 100644
index 0000000000000000000000000000000000000000..9d6415dde429e8f5c12a683c807ab955c1215d73
--- /dev/null
+++ b/lexicon/templates/lexicon/palabra_list.html
@@ -0,0 +1,70 @@
+{% extends "lexicon/base_lexicon.html" %}
+{% block title %}Palabras · Lexicon{% endblock %}
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Palabras</div>
+    <a class="btn btn-primary" href="{% url 'lexicon:palabra_create' %}">Nueva</a>
+  </div>
+{% endblock %}
+{% block content_lexicon %}
+<form method="get">
+  <div class="field">
+    <input type="text" name="q" value="{{ q }}" placeholder="Buscar">
+  </div>
+  <div class="row">
+    <div class="col-4">
+      <div class="field">
+        <select name="idioma">
+          <option value="">Idioma</option>
+          {% for i in idiomas %}<option value="{{ i.code }}" {% if filtros.idioma == i.code %}selected{% endif %}>{{ i.code }}</option>{% endfor %}
+        </select>
+      </div>
+    </div>
+    <div class="col-4">
+      <div class="field">
+        <select name="categoria">
+          <option value="">Categoría</option>
+          {% for c in categorias %}<option value="{{ c.id }}" {% if filtros.categoria|add:'' == c.id|stringformat:'s' %}selected{% endif %}>{{ c.nombre }}</option>{% endfor %}
+        </select>
+      </div>
+    </div>
+    <div class="col-4">
+      <div class="field">
+        <input type="number" name="dificultad_min" value="{{ filtros.dificultad_min }}" placeholder="Dif. min">
+      </div>
+    </div>
+    <div class="col-4">
+      <div class="field">
+        <input type="number" name="dificultad_max" value="{{ filtros.dificultad_max }}" placeholder="Dif. max">
+      </div>
+    </div>
+  </div>
+  <button class="btn">Filtrar</button>
+</form>
+<table class="table">
+  <tr><th>Texto</th><th>Idioma</th><th>Dificultad</th><th></th></tr>
+  {% for obj in page_obj %}
+  <tr>
+    <td>{{ obj.texto }}</td>
+    <td>{{ obj.idioma.code }}</td>
+    <td>{{ obj.dificultad }}</td>
+    <td>
+      <a href="{% url 'lexicon:palabra_edit' obj.pk %}" class="btn btn-sm">Editar</a>
+      <form action="{% url 'lexicon:palabra_delete' obj.pk %}" method="post" style="display:inline">
+        {% csrf_token %}
+        <button class="btn btn-sm btn-danger">Eliminar</button>
+      </form>
+    </td>
+  </tr>
+  {% endfor %}
+</table>
+<p>Página {{ page_obj.number }} de {{ page_obj.paginator.num_pages }}</p>
+<div class="row">
+  <div class="col-6">
+    {% if page_obj.has_previous %}<a href="?page={{ page_obj.previous_page_number }}" class="btn btn-sm">Anterior</a>{% endif %}
+  </div>
+  <div class="col-6">
+    {% if page_obj.has_next %}<a href="?page={{ page_obj.next_page_number }}" class="btn btn-sm">Siguiente</a>{% endif %}
+  </div>
+</div>
+{% endblock %}
diff --git a/lexicon/tests/__init__.py b/lexicon/tests/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/lexicon/tests/__init__.py
diff --git a/lexicon/tests/test_import.py b/lexicon/tests/test_import.py
new file mode 100644
index 0000000000000000000000000000000000000000..dffcec07e90c5d3992d6c1a8fa370465c5fd9c1a
--- /dev/null
+++ b/lexicon/tests/test_import.py
@@ -0,0 +1,19 @@
+from pathlib import Path
+
+from django.core.management import call_command
+
+from lexicon.models import Word
+
+
+def test_import_words_command(db):
+    dataset_dir = Path(__file__).resolve().parents[1] / "datasets"
+    expected = sum(
+        sum(1 for _ in f.open()) - 1 for f in dataset_dir.glob("*_sample.csv")
+    )
+
+    call_command("import_words")
+    assert Word.objects.count() == expected
+
+    # Running again should not duplicate entries
+    call_command("import_words")
+    assert Word.objects.count() == expected
diff --git a/lexicon/tests/test_models.py b/lexicon/tests/test_models.py
new file mode 100644
index 0000000000000000000000000000000000000000..3b50c2e3bb2e54d0cd07d70e4de561da03a0320b
--- /dev/null
+++ b/lexicon/tests/test_models.py
@@ -0,0 +1,64 @@
+import pytest
+from django.db import IntegrityError
+
+from lexicon.models import Idioma, Categoria, Palabra
+
+
+pytestmark = pytest.mark.django_db
+
+@pytest.fixture
+def idioma_es():
+    return Idioma.objects.create(code="es", nombre="Español")
+
+
+@pytest.fixture
+def idioma_en():
+    return Idioma.objects.create(code="en", nombre="English")
+
+
+@pytest.fixture
+def categoria_animales():
+    return Categoria.objects.create(nombre="Animales", slug="animales", tipo_contenido="wordsearch")
+
+
+@pytest.fixture
+def categoria_tecnologia():
+    return Categoria.objects.create(nombre="Tecnología", slug="tecnologia", tipo_contenido="crossword")
+
+
+@pytest.fixture
+def palabra_factory():
+    def create_palabra(idioma, texto="palabra"):
+        return Palabra.objects.create(texto=texto, idioma=idioma)
+    return create_palabra
+
+
+def test_crea_idiomas_y_categorias(idioma_es, idioma_en, categoria_animales, categoria_tecnologia):
+    assert Idioma.objects.count() == 2
+    assert Categoria.objects.count() == 2
+    assert str(idioma_es) == "Español"
+    assert str(categoria_animales) == "Animales"
+
+
+def test_unique_palabra_por_idioma(idioma_es, palabra_factory):
+    palabra_factory(idioma_es, texto="hola")
+    with pytest.raises(IntegrityError):
+        palabra_factory(idioma_es, texto="hola")
+
+
+def test_palabra_m2m_categorias(idioma_es, categoria_animales, categoria_tecnologia, palabra_factory):
+    palabra = palabra_factory(idioma_es, texto="lobo")
+    palabra.categorias.add(categoria_animales, categoria_tecnologia)
+    assert palabra.categorias.count() == 2
+
+
+def test_filtrado_por_idioma_y_categoria(idioma_es, idioma_en, categoria_animales, categoria_tecnologia, palabra_factory):
+    palabra_es = palabra_factory(idioma_es, texto="gato")
+    palabra_es.categorias.add(categoria_animales)
+    palabra_en = palabra_factory(idioma_en, texto="cat")
+    palabra_en.categorias.add(categoria_animales)
+    palabra_es_tech = palabra_factory(idioma_es, texto="chip")
+    palabra_es_tech.categorias.add(categoria_tecnologia)
+
+    qs = Palabra.objects.filter(idioma=idioma_es, categorias=categoria_animales)
+    assert list(qs) == [palabra_es]
diff --git a/lexicon/tests/test_seed_smoke.py b/lexicon/tests/test_seed_smoke.py
new file mode 100644
index 0000000000000000000000000000000000000000..4984729c3fcfe8d55833423f4c06d748c8b79fdb
--- /dev/null
+++ b/lexicon/tests/test_seed_smoke.py
@@ -0,0 +1,15 @@
+import pytest
+from django.core.management import call_command
+
+from lexicon.models import Categoria, Idioma, Palabra
+
+
+@pytest.mark.django_db
+def test_seed_smoke():
+    call_command("seed_lexicon", per_lang=50, langs="es,en")
+    assert Palabra.objects.count() >= 100
+    assert Idioma.objects.filter(code="es").exists()
+    assert Idioma.objects.filter(code="en").exists()
+    assert Categoria.objects.count() >= 10
+    pairs = set(Palabra.objects.values_list("texto", "idioma__code"))
+    assert len(pairs) == Palabra.objects.count()
diff --git a/lexicon/urls.py b/lexicon/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..daf2e64058864f158225a2ab4e946135d2fd73d6
--- /dev/null
+++ b/lexicon/urls.py
@@ -0,0 +1,31 @@
+from django.urls import path
+from . import views
+
+app_name = "lexicon"
+
+urlpatterns = [
+    path("", views.index, name="index"),
+    # Idiomas
+    path("idiomas/", views.idioma_list, name="idioma_list"),
+    path("idiomas/create/", views.idioma_create, name="idioma_create"),
+    path("idiomas/<str:code>/edit/", views.idioma_edit, name="idioma_edit"),
+    path("idiomas/<str:code>/delete/", views.idioma_delete, name="idioma_delete"),
+    # Categorías
+    path("categorias/", views.categoria_list, name="categoria_list"),
+    path("categorias/create/", views.categoria_create, name="categoria_create"),
+    path("categorias/<int:pk>/edit/", views.categoria_edit, name="categoria_edit"),
+    path("categorias/<int:pk>/delete/", views.categoria_delete, name="categoria_delete"),
+    # Palabras
+    path("palabras/", views.palabra_list, name="palabra_list"),
+    path("palabras/create/", views.palabra_create, name="palabra_create"),
+    path("palabras/<int:pk>/edit/", views.palabra_edit, name="palabra_edit"),
+    path("palabras/<int:pk>/delete/", views.palabra_delete, name="palabra_delete"),
+    # Listas
+    path("listas/", views.lista_list, name="lista_list"),
+    path("listas/create/", views.lista_create, name="lista_create"),
+    path("listas/<int:pk>/edit/", views.lista_edit, name="lista_edit"),
+    path("listas/<int:pk>/delete/", views.lista_delete, name="lista_delete"),
+    # Importación CSV
+    path("import/", views.import_csv, name="import_csv"),
+    path("import/preview/", views.import_preview, name="import_preview"),
+]
diff --git a/lexicon/utils.py b/lexicon/utils.py
new file mode 100644
index 0000000000000000000000000000000000000000..ded7ca287ea04e351b469cf51d3ec98a8e30c3f8
--- /dev/null
+++ b/lexicon/utils.py
@@ -0,0 +1,74 @@
+from __future__ import annotations
+
+import csv
+import io
+import json
+import re
+from typing import Iterable, List
+
+from django.utils.text import slugify
+
+from .models import Categoria, Idioma, Palabra
+
+
+def normalize_text(s: str) -> str:
+    return " ".join(s.strip().lower().split())
+
+
+def parse_tags(s: str) -> dict:
+    if not s:
+        return {}
+    if isinstance(s, dict):
+        return s
+    try:
+        return json.loads(s)
+    except Exception:
+        return {}
+
+
+def ensure_slug(nombre: str) -> str:
+    base = slugify(nombre)
+    slug = base
+    i = 1
+    while Categoria.objects.filter(slug=slug).exists():
+        slug = f"{base}-{i}"
+        i += 1
+    return slug
+
+
+def split_categories(s: str) -> List[str]:
+    if not s:
+        return []
+    parts = re.split(r"[|;]", s)
+    return [normalize_text(p) for p in parts if p.strip()]
+
+
+def bulk_upsert_palabras(rows: Iterable[dict], idioma: Idioma, batch_size: int = 500):
+    inserted = duplicated = errors = 0
+    cat_cache = {c.nombre: c for c in Categoria.objects.all()}
+    buffer: List[Palabra] = []
+    relations: List[List[str]] = []
+    for row in rows:
+        texto = normalize_text(row.get("texto", ""))
+        if not texto:
+            errors += 1
+            continue
+        dificultad = int(row.get("dificultad", 1))
+        tags = parse_tags(row.get("tags", {}))
+        cats = split_categories(row.get("categorias", ""))
+        buffer.append(Palabra(texto=texto, idioma=idioma, dificultad=dificultad, tags=tags))
+        relations.append(cats)
+    for i in range(0, len(buffer), batch_size):
+        batch = buffer[i : i + batch_size]
+        rel = relations[i : i + batch_size]
+        created = Palabra.objects.bulk_create(batch, ignore_conflicts=True)
+        inserted += len(created)
+        duplicated += len(batch) - len(created)
+        for obj, cats in zip(created, rel):
+            for cname in cats:
+                cat = cat_cache.get(cname)
+                if not cat:
+                    cat = Categoria.objects.create(nombre=cname, slug=ensure_slug(cname), tipo_contenido="wordsearch")
+                    cat_cache[cname] = cat
+                obj.categorias.add(cat)
+    return {"insertadas": inserted, "duplicadas": duplicated, "errores": errors}
diff --git a/lexicon/views.py b/lexicon/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..b4ff88d99f66a131b5252af3d20b81ce290a72a5
--- /dev/null
+++ b/lexicon/views.py
@@ -0,0 +1,279 @@
+from __future__ import annotations
+
+import csv
+import io
+from typing import List
+
+from django.contrib import messages
+from django.contrib.auth.decorators import login_required
+from core.auth import require_group
+from django.core.paginator import Paginator
+from django.db.models import Q
+from django.shortcuts import get_object_or_404, redirect, render
+from django.utils.text import slugify
+
+from .forms import (
+    CategoriaForm,
+    IdiomaForm,
+    ImportCSVForm,
+    ListaPalabrasForm,
+    PalabraForm,
+)
+from .models import Categoria, Idioma, ListaPalabras, Palabra
+from .utils import bulk_upsert_palabras, normalize_text
+
+
+@login_required
+def index(request):
+    return render(request, "lexicon/index.html")
+
+
+@login_required
+def idioma_list(request):
+    q = request.GET.get("q", "")
+    qs = Idioma.objects.all()
+    if q:
+        qs = qs.filter(Q(code__icontains=q) | Q(nombre__icontains=q))
+    paginator = Paginator(qs.order_by("code"), 20)
+    page_obj = paginator.get_page(request.GET.get("page"))
+    return render(request, "lexicon/idioma_list.html", {"page_obj": page_obj, "q": q})
+
+
+@require_group("editor_contenidos")
+def idioma_create(request):
+    form = IdiomaForm(request.POST or None)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Idioma creado")
+        return redirect("lexicon:idioma_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Nuevo idioma"})
+
+
+@require_group("editor_contenidos")
+def idioma_edit(request, code: str):
+    obj = get_object_or_404(Idioma, pk=code)
+    form = IdiomaForm(request.POST or None, instance=obj)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Idioma actualizado")
+        return redirect("lexicon:idioma_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Editar idioma"})
+
+
+@require_group("editor_contenidos")
+def idioma_delete(request, code: str):
+    obj = get_object_or_404(Idioma, pk=code)
+    if request.method == "POST":
+        obj.delete()
+        messages.success(request, "Idioma eliminado")
+        return redirect("lexicon:idioma_list")
+    return render(request, "lexicon/confirm_delete.html", {"obj": obj})
+
+
+@login_required
+def categoria_list(request):
+    q = request.GET.get("q", "")
+    qs = Categoria.objects.all()
+    if q:
+        qs = qs.filter(Q(nombre__icontains=q) | Q(slug__icontains=q))
+    paginator = Paginator(qs.order_by("nombre"), 20)
+    page_obj = paginator.get_page(request.GET.get("page"))
+    return render(request, "lexicon/categoria_list.html", {"page_obj": page_obj, "q": q})
+
+
+@require_group("editor_contenidos")
+def categoria_create(request):
+    form = CategoriaForm(request.POST or None)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Categoría creada")
+        return redirect("lexicon:categoria_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Nueva categoría"})
+
+
+@require_group("editor_contenidos")
+def categoria_edit(request, pk: int):
+    obj = get_object_or_404(Categoria, pk=pk)
+    form = CategoriaForm(request.POST or None, instance=obj)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Categoría actualizada")
+        return redirect("lexicon:categoria_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Editar categoría"})
+
+
+@require_group("editor_contenidos")
+def categoria_delete(request, pk: int):
+    obj = get_object_or_404(Categoria, pk=pk)
+    if request.method == "POST":
+        obj.delete()
+        messages.success(request, "Categoría eliminada")
+        return redirect("lexicon:categoria_list")
+    return render(request, "lexicon/confirm_delete.html", {"obj": obj})
+
+
+@login_required
+def palabra_list(request):
+    q = request.GET.get("q", "")
+    idioma_code = request.GET.get("idioma")
+    categoria_id = request.GET.get("categoria")
+    diff_min = request.GET.get("dificultad_min")
+    diff_max = request.GET.get("dificultad_max")
+    qs = Palabra.objects.all().select_related("idioma")
+    if q:
+        qs = qs.filter(texto__icontains=q)
+    if idioma_code:
+        qs = qs.filter(idioma__code=idioma_code)
+    if categoria_id:
+        qs = qs.filter(categorias__pk=categoria_id)
+    if diff_min:
+        qs = qs.filter(dificultad__gte=diff_min)
+    if diff_max:
+        qs = qs.filter(dificultad__lte=diff_max)
+    paginator = Paginator(qs.order_by("texto").distinct(), 20)
+    page_obj = paginator.get_page(request.GET.get("page"))
+    context = {
+        "page_obj": page_obj,
+        "q": q,
+        "idiomas": Idioma.objects.all(),
+        "categorias": Categoria.objects.all(),
+        "filtros": {
+            "idioma": idioma_code,
+            "categoria": categoria_id,
+            "dificultad_min": diff_min,
+            "dificultad_max": diff_max,
+        },
+    }
+    return render(request, "lexicon/palabra_list.html", context)
+
+
+@require_group("editor_contenidos")
+def palabra_create(request):
+    form = PalabraForm(request.POST or None)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Palabra creada")
+        return redirect("lexicon:palabra_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Nueva palabra"})
+
+
+@require_group("editor_contenidos")
+def palabra_edit(request, pk: int):
+    obj = get_object_or_404(Palabra, pk=pk)
+    form = PalabraForm(request.POST or None, instance=obj)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Palabra actualizada")
+        return redirect("lexicon:palabra_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Editar palabra"})
+
+
+@require_group("editor_contenidos")
+def palabra_delete(request, pk: int):
+    obj = get_object_or_404(Palabra, pk=pk)
+    if request.method == "POST":
+        obj.delete()
+        messages.success(request, "Palabra eliminada")
+        return redirect("lexicon:palabra_list")
+    return render(request, "lexicon/confirm_delete.html", {"obj": obj})
+
+
+@login_required
+def lista_list(request):
+    q = request.GET.get("q", "")
+    idioma_code = request.GET.get("idioma")
+    qs = ListaPalabras.objects.all().select_related("idioma")
+    if q:
+        qs = qs.filter(nombre__icontains=q)
+    if idioma_code:
+        qs = qs.filter(idioma__code=idioma_code)
+    paginator = Paginator(qs.order_by("nombre"), 20)
+    page_obj = paginator.get_page(request.GET.get("page"))
+    return render(
+        request,
+        "lexicon/lista_list.html",
+        {"page_obj": page_obj, "q": q, "idiomas": Idioma.objects.all(), "filtros": {"idioma": idioma_code}},
+    )
+
+
+@require_group("editor_contenidos")
+def lista_create(request):
+    form = ListaPalabrasForm(request.POST or None)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Lista creada")
+        return redirect("lexicon:lista_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Nueva lista"})
+
+
+@require_group("editor_contenidos")
+def lista_edit(request, pk: int):
+    obj = get_object_or_404(ListaPalabras, pk=pk)
+    form = ListaPalabrasForm(request.POST or None, instance=obj)
+    if request.method == "POST" and form.is_valid():
+        form.save()
+        messages.success(request, "Lista actualizada")
+        return redirect("lexicon:lista_list")
+    return render(request, "lexicon/form.html", {"form": form, "titulo": "Editar lista"})
+
+
+@require_group("editor_contenidos")
+def lista_delete(request, pk: int):
+    obj = get_object_or_404(ListaPalabras, pk=pk)
+    if request.method == "POST":
+        obj.delete()
+        messages.success(request, "Lista eliminada")
+        return redirect("lexicon:lista_list")
+    return render(request, "lexicon/confirm_delete.html", {"obj": obj})
+
+
+@require_group("editor_contenidos")
+def import_csv(request):
+    form = ImportCSVForm(request.POST or None, request.FILES or None)
+    if request.method == "POST" and form.is_valid():
+        data = form.cleaned_data
+        content = data["archivo"].read().decode("utf-8")
+        sep = data["separador"]
+        if data["tiene_encabezados"]:
+            reader = csv.DictReader(io.StringIO(content), delimiter=sep)
+        else:
+            cols = [c.strip() for c in data.get("columnas", "").split(",") if c.strip()]
+            reader = csv.DictReader(io.StringIO(content), fieldnames=cols, delimiter=sep)
+        rows = list(reader)
+        request.session["import_rows"] = rows
+        request.session["import_meta"] = {
+            "tipo": data["tipo"],
+            "idioma": data["idioma"].code if data.get("idioma") else None,
+        }
+        return redirect("lexicon:import_preview")
+    return render(request, "lexicon/import_csv.html", {"form": form})
+
+
+@require_group("editor_contenidos")
+def import_preview(request):
+    rows: List[dict] = request.session.get("import_rows") or []
+    meta = request.session.get("import_meta") or {}
+    if not rows:
+        return redirect("lexicon:import_csv")
+    tipo = meta.get("tipo")
+    idioma_code = meta.get("idioma")
+    idioma = Idioma.objects.filter(code=idioma_code).first() if idioma_code else None
+    if request.method == "POST":
+        if tipo == "palabras" and idioma:
+            stats = bulk_upsert_palabras(rows, idioma)
+            messages.success(request, f"{stats['insertadas']} insertadas, {stats['duplicadas']} duplicadas")
+        elif tipo == "categorias":
+            for row in rows:
+                nombre = normalize_text(row.get("nombre", ""))
+                if not nombre:
+                    continue
+                slug = row.get("slug") or slugify(nombre)
+                Categoria.objects.get_or_create(
+                    nombre=nombre,
+                    defaults={"slug": slug, "tipo_contenido": row.get("tipo_contenido", "wordsearch")},
+                )
+            messages.success(request, "Categorías importadas")
+        request.session.pop("import_rows", None)
+        request.session.pop("import_meta", None)
+        return redirect("lexicon:index")
+    return render(request, "lexicon/import_preview.html", {"rows": rows[:50], "meta": meta})
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000000000000000000000000000000000..0e36cc5565321846799f0a7ec340aa4947964d54
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,14 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'juegos.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError("Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?") from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
diff --git a/mandala/__init__.py b/mandala/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/mandala/__init__.py
diff --git a/mandala/apps.py b/mandala/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..d3c3a1defd74d1c8f9f15a0e0c12f835a42d6465
--- /dev/null
+++ b/mandala/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MandalaConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'mandala'
diff --git a/mandala/forms.py b/mandala/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..5086d20fdd94c375f3026b6c81f7d94daf332fc4
--- /dev/null
+++ b/mandala/forms.py
@@ -0,0 +1,13 @@
+from django import forms
+
+
+class MandalaForm(forms.Form):
+    symmetry = forms.IntegerField(min_value=6, max_value=24, initial=12)
+    rings = forms.IntegerField(min_value=4, max_value=12, initial=7)
+    complexity = forms.IntegerField(min_value=1, max_value=10, initial=5)
+    seed = forms.IntegerField(required=False)
+
+    def to_params(self) -> dict:
+        if not self.is_valid():
+            raise forms.ValidationError("Formulario no válido")
+        return self.cleaned_data.copy()
diff --git a/mandala/migrations/__init__.py b/mandala/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/mandala/migrations/__init__.py
diff --git a/mandala/services/__init__.py b/mandala/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/mandala/services/__init__.py
diff --git a/mandala/services/generator.py b/mandala/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..212dfc34ed84b86539d15a32922a6d145896400f
--- /dev/null
+++ b/mandala/services/generator.py
@@ -0,0 +1,233 @@
+import math
+import random
+from dataclasses import dataclass
+from pathlib import Path
+from typing import Tuple
+
+from django.conf import settings
+
+# SVG helpers --------------------------------------------------------------
+
+
+def svg_header(w: int, h: int, bg: str | None = None) -> str:
+    bg_rect = f'<rect width="{w}" height="{h}" fill="{bg}"/>' if bg else ""
+    return (
+        f'<svg xmlns="http://www.w3.org/2000/svg" width="{w}" height="{h}" '
+        f'viewBox="0 0 {w} {h}" stroke-linecap="round">{bg_rect}'
+    )
+
+
+def svg_footer() -> str:
+    return "</svg>"
+
+
+def group_open(transform: str = "", opacity: float | None = None) -> str:
+    t = f' transform="{transform}"' if transform else ""
+    o = f' opacity="{opacity}"' if opacity is not None else ""
+    return f"<g{t}{o}>"
+
+
+def group_close() -> str:
+    return "</g>"
+
+
+def path(d: str, stroke="#000", fill="none", sw=1.5) -> str:
+    return f'<path d="{d}" stroke="{stroke}" fill="{fill}" stroke-width="{sw}"/>'
+
+
+def circle(cx, cy, r, stroke="#000", fill="none", sw=1) -> str:
+    return f'<circle cx="{cx}" cy="{cy}" r="{r}" stroke="{stroke}" fill="{fill}" stroke-width="{sw}"/>'
+
+
+def dot(cx, cy, r=1.2, fill="#000") -> str:
+    return f'<circle cx="{cx}" cy="{cy}" r="{r}" fill="{fill}" stroke="none"/>'
+
+
+# Geometry -----------------------------------------------------------------
+
+
+def rotate_point(x: float, y: float, ang: float) -> Tuple[float, float]:
+    ca, sa = math.cos(ang), math.sin(ang)
+    return (x * ca - y * sa, x * sa + y * ca)
+
+
+def pol2cart(r: float, theta: float) -> Tuple[float, float]:
+    return (r * math.cos(theta), r * math.sin(theta))
+
+
+# Motifs (Bézier petals/leaves, arcs, stars, etc.) -------------------------
+
+
+def bezier_petal(r_in: float, r_out: float, w: float) -> str:
+    x0, y0 = r_in, 0
+    x3, y3 = r_out, 0
+    c1 = (x0 + (r_out - r_in) * 0.25, w)
+    c2 = (x3 - (r_out - r_in) * 0.25, w * 0.6)
+    c3 = (x3 - (r_out - r_in) * 0.25, -w * 0.6)
+    c4 = (x0 + (r_out - r_in) * 0.25, -w)
+    return (
+        f"M {x0:.3f} {y0:.3f} "
+        f"C {c1[0]:.3f} {c1[1]:.3f}, {c2[0]:.3f} {c2[1]:.3f}, {x3:.3f} {y3:.3f} "
+        f"C {c3[0]:.3f} {c3[1]:.3f}, {c4[0]:.3f} {c4[1]:.3f}, {x0:.3f} {y0:.3f} Z"
+    )
+
+
+def leaf(r_in: float, r_out: float, w: float) -> str:
+    return bezier_petal(r_in, r_out, w * 0.75)
+
+
+def arc_ring(r: float, a0: float, a1: float) -> str:
+    steps = max(8, int((a1 - a0) / (math.pi / 48)))
+    pts = [pol2cart(r, a0 + i * (a1 - a0) / steps) for i in range(steps + 1)]
+    d = f"M {pts[0][0]:.3f} {pts[0][1]:.3f} " + " ".join(
+        f"L {x:.3f} {y:.3f}" for (x, y) in pts[1:]
+    )
+    return d
+
+
+def star(r_in: float, r_out: float, tips: int = 5) -> str:
+    pts = []
+    for i in range(tips * 2):
+        ang = i * math.pi / tips
+        r = r_out if i % 2 == 0 else r_in
+        pts.append(pol2cart(r, ang))
+    d = (
+        f"M {pts[0][0]:.3f} {pts[0][1]:.3f} "
+        + " ".join(f"L {x:.3f} {y:.3f}" for x, y in pts[1:])
+        + " Z"
+    )
+    return d
+
+
+def kfold(d: str, k: int, stroke="#000", fill="none", sw=1.2) -> str:
+    out = []
+    for i in range(k):
+        ang = (2 * math.pi / k) * i
+        out.append(
+            f'<g transform="rotate({math.degrees(ang):.3f})">{path(d, stroke, fill, sw)}</g>'
+        )
+    return "".join(out)
+
+
+# Parameters ----------------------------------------------------------------
+
+
+@dataclass
+class MandalaParams:
+    size: int = 2048
+    margin: int = 80
+    symmetry: int = 12
+    rings: int = 7
+    complexity: int = 5
+    stroke: str = "#000"
+    bg: str | None = None
+    seed: int | None = None
+
+
+# Generator -----------------------------------------------------------------
+
+
+def generate_mandala_svg(p: MandalaParams) -> str:
+    if p.seed is not None:
+        random.seed(p.seed)
+
+    w = h = p.size
+    cx = cy = p.size / 2
+    R = (p.size / 2) - p.margin
+
+    svg = [svg_header(w, h, p.bg), group_open(transform=f"translate({cx},{cy})")]
+
+    guide_count = max(3, p.rings // 2)
+    for i in range(guide_count):
+        r = R * (0.2 + 0.75 * i / max(1, guide_count - 1))
+        svg.append(circle(0, 0, r, stroke=p.stroke, fill="none", sw=0.6))
+
+    for ring_idx in range(1, p.rings + 1):
+        progress = ring_idx / (p.rings + 1)
+        r_in = R * (0.04 + 0.9 * (ring_idx - 1) / (p.rings + 0.5))
+        r_out = R * (0.06 + 0.9 * ring_idx / (p.rings + 0.3))
+        sw = 0.8 + 1.2 * (1 - progress)
+
+        ring_group = [group_open(opacity=0.98)]
+
+        choice = random.random()
+        motif_count = p.symmetry
+
+        if choice < 0.30:
+            base_w = (r_out - r_in) * (0.55 + 0.15 * random.random())
+            d0 = bezier_petal(r_in, r_out, base_w)
+            ring_group.append(
+                kfold(d0, p.symmetry, stroke=p.stroke, fill="none", sw=sw)
+            )
+        elif choice < 0.55:
+            d0 = leaf(r_in, r_out, (r_out - r_in) * (0.5 + 0.2 * random.random()))
+            ring_group.append(
+                kfold(d0, p.symmetry, stroke=p.stroke, fill="none", sw=sw)
+            )
+            d1 = arc_ring((r_in + r_out) * 0.5, 0, 2 * math.pi / p.symmetry - 0.06)
+            ring_group.append(
+                kfold(d1, p.symmetry, stroke=p.stroke, fill="none", sw=sw * 0.7)
+            )
+        elif choice < 0.75:
+            tips = 5 if p.symmetry % 2 == 0 else 6
+            d0 = star(r_in * 0.9, r_out * 0.95, tips)
+            ring_group.append(
+                kfold(d0, p.symmetry, stroke=p.stroke, fill="none", sw=sw)
+            )
+        else:
+            for i in range(motif_count):
+                ang = (2 * math.pi / motif_count) * i
+                r_mid = (r_in + r_out) * 0.5
+                jitter = (r_out - r_in) * 0.15 * (random.random() - 0.5)
+                x, y = pol2cart(r_mid + jitter, ang)
+                ring_group.append(
+                    dot(x, y, r=1.0 + 0.6 * random.random(), fill=p.stroke)
+                )
+            d1 = arc_ring(r_out, 0, 2 * math.pi / p.symmetry - 0.05)
+            ring_group.append(
+                kfold(d1, p.symmetry, stroke=p.stroke, fill="none", sw=sw * 0.7)
+            )
+
+        ring_group.append(group_close())
+        svg.extend(ring_group)
+
+        extra = max(0, p.complexity - 5)
+        for _ in range(extra):
+            r = random.uniform(r_in, r_out)
+            d = arc_ring(r, 0, 2 * math.pi / p.symmetry - random.uniform(0.02, 0.08))
+            svg.append(kfold(d, p.symmetry, stroke=p.stroke, fill="none", sw=sw * 0.6))
+
+    svg.append(group_close())
+    svg.append(svg_footer())
+    return "".join(svg)
+
+
+# Export helpers ------------------------------------------------------------
+
+
+def svg_to_png(svg: str, out_path: Path, scale: float = 1.0) -> None:
+    try:
+        import cairosvg
+    except Exception as e:  # pragma: no cover - missing dependency
+        raise RuntimeError("cairosvg is required for PNG/PDF export") from e
+    cairosvg.svg2png(
+        bytestring=svg.encode("utf-8"), write_to=str(out_path), scale=scale
+    )
+
+
+def svg_to_pdf(svg: str, out_path: Path, scale: float = 1.0) -> None:
+    try:
+        import cairosvg
+    except Exception as e:  # pragma: no cover - missing dependency
+        raise RuntimeError("cairosvg is required for PNG/PDF export") from e
+    cairosvg.svg2pdf(
+        bytestring=svg.encode("utf-8"), write_to=str(out_path), scale=scale
+    )
+
+
+def save_svg(svg: str, filename: str) -> str:
+    base = Path(settings.MEDIA_ROOT) / "exports" / "mandala"
+    base.mkdir(parents=True, exist_ok=True)
+    out_path = base / filename
+    out_path.write_text(svg, encoding="utf-8")
+    return f"exports/mandala/{filename}"
diff --git a/mandala/templates/mandala/detail.html b/mandala/templates/mandala/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..31512a9ea18e067230f2a4f4b1d2658a45a695b8
--- /dev/null
+++ b/mandala/templates/mandala/detail.html
@@ -0,0 +1,17 @@
+{% extends "base.html" %}
+{% block title %}Mandala #{{ jg.id }}{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Mandala #{{ jg.id }}</div>
+    <div>
+      <a class="btn btn-sm" href="{% url 'mandala:export' jg.id %}?format=pdf">PDF</a>
+      <a class="btn btn-sm" href="{% url 'mandala:export' jg.id %}?format=png">PNG</a>
+      <a class="btn btn-sm" href="{% url 'mandala:export' jg.id %}?format=svg">SVG</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<div>{{ svg|safe }}</div>
+{% endblock %}
diff --git a/mandala/templates/mandala/index.html b/mandala/templates/mandala/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..1ac2284929755ae83e049b26f32f4ed1222378b0
--- /dev/null
+++ b/mandala/templates/mandala/index.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Generar Mandala · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Mandala</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post" action="{% url 'mandala:create' %}">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button type="submit" class="btn btn-primary">Generar</button>
+</form>
+{% endblock %}
diff --git a/mandala/urls.py b/mandala/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..f6c592a929f085766c529a9c3e4b6dc61d7b205d
--- /dev/null
+++ b/mandala/urls.py
@@ -0,0 +1,11 @@
+from django.urls import path
+from . import views
+
+app_name = "mandala"
+
+urlpatterns = [
+    path("", views.index, name="index"),
+    path("create/", views.create, name="create"),
+    path("detail/<int:pk>/", views.detail, name="detail"),
+    path("export/<int:pk>/", views.export, name="export"),
+]
diff --git a/mandala/views.py b/mandala/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..a8d5095ebe0ddc2d9edf94d7779815fcf53f47b4
--- /dev/null
+++ b/mandala/views.py
@@ -0,0 +1,78 @@
+from pathlib import Path
+
+from django.conf import settings
+from django.contrib.auth.decorators import login_required
+from django.http import FileResponse, Http404
+from django.shortcuts import get_object_or_404, redirect, render
+
+from core.auth import require_group
+from puzzles.models import Exportacion, JuegoGenerado
+
+from .forms import MandalaForm
+from .services.generator import (
+    MandalaParams,
+    generate_mandala_svg,
+    save_svg,
+    svg_to_pdf,
+    svg_to_png,
+)
+
+
+@require_group("generador")
+def index(request):
+    form = MandalaForm()
+    return render(request, "mandala/index.html", {"form": form})
+
+
+@require_group("generador")
+def create(request):
+    form = MandalaForm(request.POST)
+    if not form.is_valid():
+        return render(request, "mandala/index.html", {"form": form})
+    params = MandalaParams(**form.to_params())
+    svg = generate_mandala_svg(params)
+    jg = JuegoGenerado.objects.create(
+        tipo="mandala",
+        parametros=form.cleaned_data,
+        seed=form.cleaned_data.get("seed") or 0,
+        creado_por=request.user if request.user.is_authenticated else None,
+    )
+    rel_path = save_svg(svg, f"{jg.id}.svg")
+    jg.resultado = rel_path
+    jg.save()
+    return redirect("mandala:detail", pk=jg.pk)
+
+
+@login_required
+def detail(request, pk):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="mandala")
+    svg_path = Path(settings.MEDIA_ROOT) / jg.resultado
+    svg = svg_path.read_text(encoding="utf-8")
+    return render(request, "mandala/detail.html", {"jg": jg, "svg": svg})
+
+
+@login_required
+def export(request, pk):
+    fmt = request.GET.get("format", "svg")
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="mandala")
+    base = Path(settings.MEDIA_ROOT) / "exports" / "mandala"
+    svg_path = base / f"{jg.id}.svg"
+    if not svg_path.exists():
+        raise Http404
+    svg_data = svg_path.read_text(encoding="utf-8")
+    if fmt == "svg":
+        export_path = svg_path
+    elif fmt == "png":
+        export_path = base / f"{jg.id}.png"
+        svg_to_png(svg_data, export_path)
+    elif fmt == "pdf":
+        export_path = base / f"{jg.id}.pdf"
+        svg_to_pdf(svg_data, export_path)
+    else:
+        raise Http404
+    Exportacion.objects.create(
+        juego=jg, formato=fmt, archivo=str(export_path.relative_to(settings.MEDIA_ROOT))
+    )
+    return FileResponse(
+        open(export_path, "rb"), as_attachment=True, filename=export_path.name
+    )
diff --git a/maze/__init__.py b/maze/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b137891791fe96927ad78e64b0aad7bded08bdc
--- /dev/null
+++ b/maze/__init__.py
@@ -0,0 +1 @@
+
diff --git a/maze/apps.py b/maze/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..49aa9582ac7e026eeab105b57f95b4b5de4a93ef
--- /dev/null
+++ b/maze/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class MazeConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "maze"
diff --git a/maze/forms.py b/maze/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..46e5f4fcc969c8edceb4b8922a5ddf2e151b8ba0
--- /dev/null
+++ b/maze/forms.py
@@ -0,0 +1,25 @@
+from django import forms
+
+SHAPES = [("rect", "Rectangular"), ("circ", "Circular"), ("tri", "Triangular")]
+DIFF = [("easy", "Fácil"), ("med", "Media"), ("hard", "Difícil")]
+
+
+class MazeForm(forms.Form):
+    shape = forms.ChoiceField(choices=SHAPES, label="Forma")
+    width = forms.IntegerField(
+        min_value=5, max_value=200, initial=31, label="Ancho (rect)"
+    )
+    height = forms.IntegerField(
+        min_value=5, max_value=200, initial=31, label="Alto (rect)"
+    )
+    rings = forms.IntegerField(
+        min_value=2, max_value=100, initial=12, required=False, label="Anillos (circ)"
+    )
+    sectors = forms.IntegerField(
+        min_value=4, max_value=360, initial=36, required=False, label="Sectores (circ)"
+    )
+    tri_size = forms.IntegerField(
+        min_value=5, max_value=200, initial=40, required=False, label="Tamaño (tri)"
+    )
+    difficulty = forms.ChoiceField(choices=DIFF, initial="med", label="Dificultad")
+    seed = forms.CharField(required=False, label="Semilla")
diff --git a/maze/migrations/__init__.py b/maze/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/maze/migrations/__init__.py
diff --git a/maze/services/exporter.py b/maze/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..cf315de8659c7deeae69689ee7e03f5059c7a32a
--- /dev/null
+++ b/maze/services/exporter.py
@@ -0,0 +1,37 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+import cairosvg
+from django.conf import settings
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+def export_svg(svg: str, path: Path):
+    path.write_text(svg)
+    return path
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    base = Path(settings.MEDIA_ROOT) / "exports" / "maze"
+    base.mkdir(parents=True, exist_ok=True)
+    path = base / f"{juego.id}.pdf"
+    svg = Path(settings.MEDIA_ROOT) / juego.resultado["svg"]
+    cairosvg.svg2pdf(url=str(svg), write_to=str(path))
+    Exportacion.objects.create(
+        juego=juego, formato="pdf", archivo=f"exports/maze/{juego.id}.pdf"
+    )
+    return path
+
+
+def export_to_png(juego: JuegoGenerado):
+    base = Path(settings.MEDIA_ROOT) / "exports" / "maze"
+    base.mkdir(parents=True, exist_ok=True)
+    path = base / f"{juego.id}.png"
+    svg = Path(settings.MEDIA_ROOT) / juego.resultado["svg"]
+    cairosvg.svg2png(url=str(svg), write_to=str(path))
+    Exportacion.objects.create(
+        juego=juego, formato="png", archivo=f"exports/maze/{juego.id}.png"
+    )
+    return path
diff --git a/maze/services/generator.py b/maze/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..353b427e4d53ea252d8268625305effb6909ff35
--- /dev/null
+++ b/maze/services/generator.py
@@ -0,0 +1,51 @@
+from __future__ import annotations
+
+import random
+
+CELL = 20
+
+
+def generate_rect(width: int, height: int, seed: str | None = None) -> tuple[str, str]:
+    rng = random.Random(seed)
+    w, h = width // 2 * 2 + 1, height // 2 * 2 + 1
+    grid = [[1] * w for _ in range(h)]
+
+    def carve(x: int, y: int):
+        dirs = [(2, 0), (-2, 0), (0, 2), (0, -2)]
+        rng.shuffle(dirs)
+        for dx, dy in dirs:
+            nx, ny = x + dx, y + dy
+            if 0 < nx < w and 0 < ny < h and grid[ny][nx] == 1:
+                grid[ny - dy // 2][nx - dx // 2] = 0
+                grid[ny][nx] = 0
+                carve(nx, ny)
+
+    grid[1][1] = 0
+    carve(1, 1)
+    grid[h - 2][w - 2] = 0
+
+    svg_lines = []
+    for y in range(h):
+        for x in range(w):
+            if grid[y][x] == 1:
+                x0, y0 = x * CELL, y * CELL
+                svg_lines.append(
+                    f"<rect x='{x0}' y='{y0}' width='{CELL}' height='{CELL}' fill='black'/>"
+                )
+    svg_content = "".join(svg_lines)
+    svg = f"<svg xmlns='http://www.w3.org/2000/svg' width='{w*CELL}' height='{h*CELL}'>{svg_content}</svg>"
+
+    sol = f"<svg xmlns='http://www.w3.org/2000/svg' width='{w*CELL}' height='{h*CELL}'>"
+    sol += svg_content
+    sol += f"<polyline points='10,10 {w*CELL-10},{h*CELL-10}' stroke='red' stroke-width='4' fill='none'/></svg>"
+
+    return svg, sol
+
+
+def generate(params: dict) -> dict:
+    shape = params.get("shape")
+    seed = params.get("seed")
+    if shape != "rect":
+        raise NotImplementedError("Solo rectangular implementado")
+    svg, sol = generate_rect(params["width"], params["height"], seed)
+    return {"svg": svg, "solution": sol}
diff --git a/maze/templates/maze/create.html b/maze/templates/maze/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..3c96c53b12597963eca17d61bcfde08fd5b6d961
--- /dev/null
+++ b/maze/templates/maze/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Generar laberinto · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Generar laberinto</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/maze/templates/maze/detail.html b/maze/templates/maze/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..8d49d11ac2e258bee3661a88f6ce804b1aa9339d
--- /dev/null
+++ b/maze/templates/maze/detail.html
@@ -0,0 +1,18 @@
+{% extends "base.html" %}
+{% block title %}Laberinto · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Laberinto</div>
+    <div>
+      <a class="btn btn-sm" href="{% url 'maze:export' jg.id 'pdf' %}">PDF</a>
+      <a class="btn btn-sm" href="{% url 'maze:export' jg.id 'png' %}">PNG</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+  <img src="/{{ jg.resultado.svg }}" class="img-fluid" alt="maze">
+  <h5>Solución</h5>
+  <img src="/{{ jg.resultado.solution }}" class="img-fluid" alt="solución">
+{% endblock %}
diff --git a/maze/templates/maze/index.html b/maze/templates/maze/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..cf936cabf996c7bd1b0681cd61294785c2b2b5d7
--- /dev/null
+++ b/maze/templates/maze/index.html
@@ -0,0 +1,27 @@
+{% extends "base.html" %}
+{% block title %}Laberintos · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Laberintos</div>
+    <a class="btn btn-sm btn-primary" href="{% url 'maze:create' %}">Nuevo</a>
+  </div>
+{% endblock %}
+
+{% block content %}
+<table class="table">
+  <thead><tr><th>ID</th><th>Forma</th><th>Fecha</th><th></th></tr></thead>
+  <tbody>
+    {% for j in juegos %}
+      <tr>
+        <td>{{ j.id }}</td>
+        <td>{{ j.parametros.shape }}</td>
+        <td>{{ j.created_at|date:"Y-m-d H:i" }}</td>
+        <td><a class="btn btn-sm" href="{% url 'maze:detail' j.id %}">Ver</a></td>
+      </tr>
+    {% empty %}
+      <tr><td colspan="4">No hay laberintos</td></tr>
+    {% endfor %}
+  </tbody>
+</table>
+{% endblock %}
diff --git a/maze/urls.py b/maze/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..0fa3d3477daa0c4911f85397d51318590e7fe6a1
--- /dev/null
+++ b/maze/urls.py
@@ -0,0 +1,12 @@
+from django.urls import path
+
+from . import views
+
+app_name = "maze"
+
+urlpatterns = [
+    path("", views.index, name="index"),
+    path("create/", views.create, name="create"),
+    path("detail/<int:pk>/", views.detail, name="detail"),
+    path("export/<int:pk>/<str:formato>/", views.export, name="export"),
+]
diff --git a/maze/views.py b/maze/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..0ad111171267043a58668b601fe0a0ea7dba0a5a
--- /dev/null
+++ b/maze/views.py
@@ -0,0 +1,73 @@
+from pathlib import Path
+
+from django.conf import settings
+from django.contrib.auth.decorators import login_required
+from django.http import FileResponse, HttpResponseBadRequest
+from django.shortcuts import get_object_or_404, redirect, render
+
+from core.auth import require_group
+from puzzles.models import JuegoGenerado
+
+from .forms import MazeForm
+from .services import exporter, generator
+
+
+@login_required
+def index(request):
+    juegos = JuegoGenerado.objects.filter(tipo="maze").order_by("-created_at")
+    return render(request, "maze/index.html", {"juegos": juegos})
+
+
+@require_group("generador")
+def create(request):
+    if request.method == "POST":
+        form = MazeForm(request.POST)
+        if form.is_valid():
+            params = form.cleaned_data
+            result = generator.generate(params)
+            base = Path(settings.MEDIA_ROOT) / "exports" / "maze"
+            base.mkdir(parents=True, exist_ok=True)
+            count = len(list(base.glob("*.svg"))) + 1
+            svg_path = base / f"maze_{count}.svg"
+            svg_path.write_text(result["svg"])
+            sol_path = base / f"maze_{count}_sol.svg"
+            sol_path.write_text(result["solution"])
+            result_paths = {
+                "svg": str(svg_path.relative_to(settings.MEDIA_ROOT)),
+                "solution": str(sol_path.relative_to(settings.MEDIA_ROOT)),
+            }
+            jg = JuegoGenerado.objects.create(
+                tipo="maze", parametros=params, resultado=result_paths
+            )
+            return redirect("maze:detail", pk=jg.pk)
+    else:
+        form = MazeForm()
+    return render(request, "maze/create.html", {"form": form})
+
+
+@login_required
+def detail(request, pk):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="maze")
+    return render(request, "maze/detail.html", {"jg": jg})
+
+
+@login_required
+def export(request, pk, formato):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="maze")
+    if formato == "pdf":
+        path = exporter.export_to_pdf(jg)
+        return FileResponse(
+            open(path, "rb"),
+            content_type="application/pdf",
+            as_attachment=True,
+            filename=f"maze_{jg.id}.pdf",
+        )
+    if formato == "png":
+        path = exporter.export_to_png(jg)
+        return FileResponse(
+            open(path, "rb"),
+            content_type="image/png",
+            as_attachment=True,
+            filename=f"maze_{jg.id}.png",
+        )
+    return HttpResponseBadRequest("Formato no soportado")
diff --git a/media/.gitkeep b/media/.gitkeep
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/media/.gitkeep
diff --git a/puzzles/__init__.py b/puzzles/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/puzzles/__init__.py
diff --git a/puzzles/admin.py b/puzzles/admin.py
new file mode 100644
index 0000000000000000000000000000000000000000..8aa788de05aac12193a425251d65d560c149968f
--- /dev/null
+++ b/puzzles/admin.py
@@ -0,0 +1,23 @@
+from django.contrib import admin
+from .models import PlantillaJuego, JuegoGenerado, Exportacion
+
+
+@admin.register(PlantillaJuego)
+class PlantillaJuegoAdmin(admin.ModelAdmin):
+    list_display = ("nombre", "tipo")
+    search_fields = ("nombre",)
+    list_filter = ("tipo",)
+
+
+@admin.register(JuegoGenerado)
+class JuegoGeneradoAdmin(admin.ModelAdmin):
+    list_display = ("id", "tipo", "seed", "creado_por", "created_at")
+    search_fields = ("id",)
+    list_filter = ("tipo", "creado_por", "created_at")
+
+
+@admin.register(Exportacion)
+class ExportacionAdmin(admin.ModelAdmin):
+    list_display = ("id", "juego", "formato", "archivo", "created_at")
+    search_fields = ("juego__id",)
+    list_filter = ("formato", "created_at")
diff --git a/puzzles/apps.py b/puzzles/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..a8974408eb20750f625232bc24661f1333c5fd2c
--- /dev/null
+++ b/puzzles/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class PuzzlesConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'puzzles'
diff --git a/puzzles/migrations/0001_initial.py b/puzzles/migrations/0001_initial.py
new file mode 100644
index 0000000000000000000000000000000000000000..bc815b21ea3571c572082c345f8fbc3d099b0cff
--- /dev/null
+++ b/puzzles/migrations/0001_initial.py
@@ -0,0 +1,121 @@
+# Generated by Django 5.2.5 on 2025-08-25 11:32
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name="PlantillaJuego",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "tipo",
+                    models.CharField(
+                        choices=[
+                            ("crossword", "Crossword"),
+                            ("wordsearch", "Wordsearch"),
+                            ("coloring_kids", "Coloring Kids"),
+                            ("coloring_adults", "Coloring Adults"),
+                            ("calligraphy", "Calligraphy"),
+                            ("sudoku", "Sudoku"),
+                            ("mandala", "Mandala"),
+                        ],
+                        max_length=20,
+                    ),
+                ),
+                ("nombre", models.CharField(max_length=255)),
+                ("parametros_schema", models.JSONField()),
+            ],
+        ),
+        migrations.CreateModel(
+            name="JuegoGenerado",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "tipo",
+                    models.CharField(
+                        choices=[
+                            ("crossword", "Crossword"),
+                            ("wordsearch", "Wordsearch"),
+                            ("coloring_kids", "Coloring Kids"),
+                            ("coloring_adults", "Coloring Adults"),
+                            ("calligraphy", "Calligraphy"),
+                            ("sudoku", "Sudoku"),
+                            ("mandala", "Mandala"),
+                        ],
+                        max_length=20,
+                    ),
+                ),
+                ("parametros", models.JSONField()),
+                ("resultado", models.JSONField(blank=True, null=True)),
+                ("seed", models.IntegerField(default=0)),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                (
+                    "creado_por",
+                    models.ForeignKey(
+                        blank=True,
+                        null=True,
+                        on_delete=django.db.models.deletion.SET_NULL,
+                        to=settings.AUTH_USER_MODEL,
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Exportacion",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                (
+                    "formato",
+                    models.CharField(
+                        choices=[("pdf", "PDF"), ("png", "PNG"), ("svg", "SVG")],
+                        max_length=3,
+                    ),
+                ),
+                ("archivo", models.FileField(upload_to="exports/%Y/%m/%d")),
+                ("created_at", models.DateTimeField(auto_now_add=True)),
+                (
+                    "juego",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE,
+                        related_name="exportaciones",
+                        to="puzzles.juegogenerado",
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/puzzles/migrations/0002_alter_exportacion_formato.py b/puzzles/migrations/0002_alter_exportacion_formato.py
new file mode 100644
index 0000000000000000000000000000000000000000..fc3b0673219e5c7de81203473c9b017f11c74fa1
--- /dev/null
+++ b/puzzles/migrations/0002_alter_exportacion_formato.py
@@ -0,0 +1,26 @@
+# Generated by Django 5.0 on 2025-08-25 12:43
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("puzzles", "0001_initial"),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name="exportacion",
+            name="formato",
+            field=models.CharField(
+                choices=[
+                    ("pdf", "PDF"),
+                    ("png", "PNG"),
+                    ("svg", "SVG"),
+                    ("zip", "ZIP"),
+                ],
+                max_length=3,
+            ),
+        ),
+    ]
diff --git a/puzzles/migrations/__init__.py b/puzzles/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/puzzles/migrations/__init__.py
diff --git a/puzzles/models.py b/puzzles/models.py
new file mode 100644
index 0000000000000000000000000000000000000000..00814c14f7dfbd731cfca6aa52f443164289e783
--- /dev/null
+++ b/puzzles/models.py
@@ -0,0 +1,49 @@
+from django.db import models
+from django.conf import settings
+
+TIPO_CHOICES = [
+    ("crossword", "Crossword"),
+    ("wordsearch", "Wordsearch"),
+    ("coloring_kids", "Coloring Kids"),
+    ("coloring_adults", "Coloring Adults"),
+    ("calligraphy", "Calligraphy"),
+    ("sudoku", "Sudoku"),
+    ("mandala", "Mandala"),
+]
+
+
+class PlantillaJuego(models.Model):
+    tipo = models.CharField(max_length=20, choices=TIPO_CHOICES)
+    nombre = models.CharField(max_length=255)
+    parametros_schema = models.JSONField()
+
+    def __str__(self) -> str:
+        return self.nombre
+
+
+class JuegoGenerado(models.Model):
+    tipo = models.CharField(max_length=20, choices=TIPO_CHOICES)
+    parametros = models.JSONField()
+    resultado = models.JSONField(null=True, blank=True)
+    seed = models.IntegerField(default=0)
+    creado_por = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, on_delete=models.SET_NULL)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self) -> str:
+        return f"{self.tipo} #{self.pk}"
+
+
+class Exportacion(models.Model):
+    FORMATO_CHOICES = [
+        ("pdf", "PDF"),
+        ("png", "PNG"),
+        ("svg", "SVG"),
+        ("zip", "ZIP"),
+    ]
+    juego = models.ForeignKey(JuegoGenerado, on_delete=models.CASCADE, related_name="exportaciones")
+    formato = models.CharField(max_length=3, choices=FORMATO_CHOICES)
+    archivo = models.FileField(upload_to="exports/%Y/%m/%d")
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self) -> str:
+        return f"{self.formato} export for {self.juego_id}"
diff --git a/puzzles/tests/test_models.py b/puzzles/tests/test_models.py
new file mode 100644
index 0000000000000000000000000000000000000000..e4b40cf9616769fb1b80ac8227fcc506505eb087
--- /dev/null
+++ b/puzzles/tests/test_models.py
@@ -0,0 +1,37 @@
+import os
+import pytest
+from django.conf import settings
+from django.core.files.uploadedfile import SimpleUploadedFile
+
+from puzzles.models import JuegoGenerado, Exportacion
+
+
+pytestmark = pytest.mark.django_db
+
+def test_crea_juego_generado():
+    juego = JuegoGenerado.objects.create(
+        tipo="wordsearch",
+        parametros={"size": 10},
+        seed=123,
+    )
+    assert JuegoGenerado.objects.count() == 1
+    assert juego.parametros["size"] == 10
+
+
+def test_exportacion_filefield(tmp_media_dir):
+    juego = JuegoGenerado.objects.create(tipo="wordsearch", parametros={"size": 5})
+    uploaded = SimpleUploadedFile("test.pdf", b"contenido", content_type="application/pdf")
+    export = Exportacion.objects.create(juego=juego, formato="pdf", archivo=uploaded)
+    assert os.path.exists(export.archivo.path)
+    assert export.archivo.path.startswith(str(settings.MEDIA_ROOT))
+
+
+def test_parametros_y_resultado_json():
+    juego = JuegoGenerado.objects.create(
+        tipo="sudoku",
+        parametros={"level": 1},
+        resultado={"solved": False},
+    )
+    fetched = JuegoGenerado.objects.get(pk=juego.pk)
+    assert fetched.parametros["level"] == 1
+    assert fetched.resultado["solved"] is False
diff --git a/puzzles/urls.py b/puzzles/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..4da53028bdea4c287b51dd58388bf287e83ad7f2
--- /dev/null
+++ b/puzzles/urls.py
@@ -0,0 +1,8 @@
+from django.urls import path
+from . import views
+
+app_name = 'puzzles'
+
+urlpatterns = [
+    path('', views.index, name='index'),
+]
diff --git a/puzzles/views.py b/puzzles/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..86fe0b9724a5b95aa37437c85e23d535695ba654
--- /dev/null
+++ b/puzzles/views.py
@@ -0,0 +1,5 @@
+from django.http import HttpResponse
+
+
+def index(request):
+    return HttpResponse("Hola, Puzzles!")
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000000000000000000000000000000000000..47f9cef39a58732e08abc8fe6b915c2c6874e531
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,18 @@
+[tool.black]
+line-length = 88
+target-version = ['py311']
+skip-string-normalization = true
+
+[tool.ruff]
+line-length = 88
+target-version = "py311"
+src = ["."]
+fix = true
+
+[tool.ruff.lint]
+select = ["E", "F", "W", "I", "C", "N", "B"]
+ignore = ["E501", "F841", "N806", "C901"]
+
+[tool.isort]
+profile = "black"
+line_length = 88
diff --git a/pytest.ini b/pytest.ini
new file mode 100644
index 0000000000000000000000000000000000000000..87ae1440ea2867b4d621ab87fa596f878ee4cfe5
--- /dev/null
+++ b/pytest.ini
@@ -0,0 +1,4 @@
+[pytest]
+DJANGO_SETTINGS_MODULE = juegos.settings
+python_files = tests.py test_*.py *_tests.py
+addopts = -q
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000000000000000000000000000000000000..01578fe62cb6ef87b0c215f5609cdf4be8ac381b
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,14 @@
+Django==5.*
+Pillow
+WeasyPrint
+pytest
+pytest-django
+ruff
+black
+isort
+python-dotenv
+psycopg2-binary
+gunicorn
+cairosvg>=2.7.0
+tinycss2
+cssselect2
diff --git a/scripts/deploy_vps.sh b/scripts/deploy_vps.sh
new file mode 100755
index 0000000000000000000000000000000000000000..c300d6eb25e7c0d27f51cee1c180af5dcea684eb
--- /dev/null
+++ b/scripts/deploy_vps.sh
@@ -0,0 +1,12 @@
+#!/usr/bin/env bash
+set -euo pipefail
+# Uso: ./scripts/deploy_vps.sh prod
+PROFILE=${1:-prod}
+FILE="docker-compose.${PROFILE}.yml"
+if [ ! -f "$FILE" ]; then
+  echo "No existe $FILE"
+  exit 1
+fi
+echo "Construyendo e iniciando $FILE"
+docker compose -f "$FILE" --env-file .env up --build -d
+docker compose -f "$FILE" ps
diff --git a/scripts/generate_dataset.py b/scripts/generate_dataset.py
new file mode 100755
index 0000000000000000000000000000000000000000..fd066954b7035da26036cb0c48045c1258e2819f
--- /dev/null
+++ b/scripts/generate_dataset.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""Generate synthetic word datasets for the lexicon.
+
+The script writes a CSV with columns ``id,word,language``.  It is useful for
+creating large datasets locally without committing them to git.
+
+Examples
+--------
+    python scripts/generate_dataset.py --lang es --size 10000
+    python scripts/generate_dataset.py --lang en --size 5000 --output my.csv
+"""
+
+from __future__ import annotations
+
+import argparse
+import csv
+from pathlib import Path
+
+LANGS = {"es", "en", "fr", "de"}
+MAX_SIZE = 50_000
+
+
+def generate_words(lang: str, size: int):
+    for i in range(1, size + 1):
+        yield i, f"{lang}_word_{i}", lang
+
+
+def write_dataset(lang: str, size: int, output: Path) -> Path:
+    output.parent.mkdir(parents=True, exist_ok=True)
+    with output.open("w", newline="", encoding="utf-8") as fh:
+        writer = csv.writer(fh)
+        writer.writerow(["id", "word", "language"])
+        writer.writerows(generate_words(lang, size))
+    return output
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(description="Generate synthetic dataset")
+    parser.add_argument("--lang", required=True, help="Language code (es,en,fr,de)")
+    parser.add_argument("--size", type=int, default=10000, help="Number of words")
+    parser.add_argument("--output", help="Output CSV path")
+    args = parser.parse_args()
+
+    lang = args.lang.lower()
+    if lang not in LANGS:
+        parser.error(f"Unsupported language: {args.lang}")
+    if args.size > MAX_SIZE:
+        parser.error(f"size must be <= {MAX_SIZE}")
+
+    output = (
+        Path(args.output)
+        if args.output
+        else Path(__file__).resolve().parent.parent
+        / "lexicon"
+        / "datasets"
+        / f"auto_{lang}_{args.size}.csv"
+    )
+
+    path = write_dataset(lang, args.size, output)
+    print(f"Dataset written to {path}")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/static/.gitkeep b/static/.gitkeep
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/static/.gitkeep
diff --git a/static/css/theme.css b/static/css/theme.css
new file mode 100644
index 0000000000000000000000000000000000000000..a7e263f8b3bd1435059a65285ac8767985596701
--- /dev/null
+++ b/static/css/theme.css
@@ -0,0 +1,200 @@
+/* =========================================
+   Theme: MES-like (clean, modern, tabs/cards)
+   ========================================= */
+:root{
+  --bg: #f7f8fb;
+  --panel: #ffffff;
+  --text: #1f2937;
+  --muted: #6b7280;
+  --primary: #0ea5e9;
+  --primary-600: #0284c7;
+  --primary-700: #0369a1;
+  --border: #e5e7eb;
+  --accent: #10b981;
+  --warning: #f59e0b;
+  --danger: #ef4444;
+  --radius: 14px;
+  --shadow: 0 10px 22px rgba(17,24,39,.06), 0 2px 4px rgba(17,24,39,.04);
+  --font: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
+}
+
+html, body{
+  height:100%;
+  background: var(--bg);
+  color: var(--text);
+  font-family: var(--font);
+  -webkit-font-smoothing: antialiased;
+  -moz-osx-font-smoothing: grayscale;
+}
+
+/* Dark mode */
+.theme-dark{
+  --bg:#0f172a;
+  --panel:#0b1220;
+  --text:#e5e7eb;
+  --muted:#94a3b8;
+  --primary:#38bdf8;
+  --primary-600:#0ea5e9;
+  --primary-700:#0284c7;
+  --border:#1f2a44;
+  --shadow: 0 10px 22px rgba(0,0,0,.35), 0 2px 4px rgba(0,0,0,.25);
+}
+
+/* Layout */
+.navbar{
+  position:sticky; top:0; z-index:50;
+  background: var(--panel);
+  border-bottom:1px solid var(--border);
+  box-shadow: var(--shadow);
+}
+.navbar-inner{
+  max-width: 1200px; margin: 0 auto;
+  display:flex; align-items:center; gap:16px;
+  padding: 12px 20px;
+}
+.brand{
+  font-weight:800; letter-spacing:.4px;
+  color: var(--primary-700);
+}
+.nav-links{
+  display:flex; gap:10px; flex-wrap:wrap;
+}
+.nav-links a{
+  color: var(--muted); text-decoration:none;
+  padding: 8px 12px; border-radius: 10px;
+}
+.nav-links a.active, .nav-links a:hover{
+  background: rgba(14,165,233,.1);
+  color: var(--primary-700);
+}
+
+.theme-toggle{
+  margin-left:auto;
+  display:flex; align-items:center; gap:8px;
+}
+
+.container{
+  max-width: 1200px;
+  margin: 24px auto;
+  padding: 0 20px;
+}
+
+.footer{
+  margin-top: 40px;
+  color: var(--muted);
+  font-size: .9rem;
+  border-top:1px solid var(--border);
+  padding: 18px 0;
+}
+
+/* Cards */
+.card{
+  background: var(--panel);
+  border: 1px solid var(--border);
+  border-radius: var(--radius);
+  box-shadow: var(--shadow);
+  padding: 18px;
+}
+.card + .card{ margin-top:14px; }
+
+.card-header{
+  display:flex; align-items:center; justify-content:space-between;
+  margin-bottom:12px;
+}
+.card-title{
+  font-weight:700; font-size:1.1rem; color: var(--text);
+}
+
+/* Tabs */
+.tabs{
+  display:flex; gap:6px; flex-wrap:wrap;
+  border-bottom:1px solid var(--border);
+  margin-bottom: 12px;
+}
+.tab{
+  color: var(--muted);
+  padding: 10px 14px; border-radius: 12px 12px 0 0;
+  text-decoration:none;
+}
+.tab.active{
+  color: var(--text);
+  background: var(--panel);
+  border: 1px solid var(--border);
+  border-bottom-color: transparent;
+}
+
+/* Buttons */
+.btn{
+  appearance:none; cursor:pointer;
+  border:1px solid var(--border);
+  background: var(--panel);
+  padding: 10px 14px; border-radius: 12px;
+  color: var(--text);
+  transition: .15s ease-in-out;
+}
+.btn:hover{ box-shadow: var(--shadow); }
+.btn-primary{
+  background: var(--primary); color:#fff; border-color: transparent;
+}
+.btn-primary:hover{ background: var(--primary-600); }
+.btn-danger{ background: var(--danger); color:#fff; border-color:transparent; }
+.btn-ghost{ background: transparent; }
+.btn-sm{ padding: 6px 10px; border-radius:10px; }
+
+/* Forms */
+.field{
+  display:flex; flex-direction:column; gap:6px; margin-bottom:12px;
+}
+label{ color: var(--muted); font-size:.95rem; }
+input[type=text], input[type=number], input[type=password], select, textarea{
+  width:100%;
+  border:1px solid var(--border);
+  background: var(--panel);
+  color: var(--text);
+  border-radius: 12px; padding: 10px 12px;
+  outline:none;
+}
+input:focus, select:focus, textarea:focus{ border-color: var(--primary); }
+
+/* Tables */
+.table{
+  width:100%; border-collapse:separate; border-spacing:0;
+  border:1px solid var(--border); border-radius: 12px;
+  overflow:hidden; background: var(--panel);
+}
+.table th, .table td{
+  padding: 12px; border-bottom:1px solid var(--border);
+}
+.table th{ text-align:left; color: var(--muted); background: rgba(14,165,233,.04); }
+.table tr:last-child td{ border-bottom: none; }
+
+/* Django messages */
+.alert{ border:1px solid var(--border); border-radius:12px; padding:12px 14px; }
+.alert-info{ background: rgba(14,165,233,.08); border-color: var(--primary); }
+.alert-success{ background: rgba(16,185,129,.1); border-color: var(--accent); }
+.alert-warning{ background: rgba(245,158,11,.1); border-color: var(--warning); }
+.alert-error{ background: rgba(239,68,68,.1); border-color: var(--danger); }
+
+/* Utilities */
+.row{ display:grid; grid-template-columns: repeat(12,1fr); gap: 14px; }
+.col-4{ grid-column: span 4; } .col-6{ grid-column: span 6; } .col-12{ grid-column: span 12; }
+@media (max-width: 1024px){
+  .col-4, .col-6{ grid-column: span 12; }
+}
+.img-fluid{width:100%;height:auto;}
+
+/* Sudoku board */
+.sudoku-board{
+  display:grid;
+  gap:0; border:2px solid var(--text);
+  margin:8px 0; background:var(--panel);
+}
+.sudoku-cell{
+  width:38px; height:38px; line-height:38px;
+  text-align:center; border:1px solid var(--border);
+  font-weight:600; font-size:1.1rem;
+}
+.sudoku-strong-top{ border-top:2px solid var(--text); }
+.sudoku-strong-left{ border-left:2px solid var(--text); }
+.sudoku-strong-right{ border-right:2px solid var(--text); }
+.sudoku-strong-bottom{ border-bottom:2px solid var(--text); }
diff --git a/static/img/favicon.svg b/static/img/favicon.svg
new file mode 100644
index 0000000000000000000000000000000000000000..5e48afd370512b2e2730756ca43d11377cd9280f
--- /dev/null
+++ b/static/img/favicon.svg
@@ -0,0 +1,3 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
+  <text x="50" y="60" text-anchor="middle" font-size="60">🎮</text>
+</svg>
diff --git a/static/js/ui.js b/static/js/ui.js
new file mode 100644
index 0000000000000000000000000000000000000000..e07a951f4ad3a20619c7a028092586cc7ee440b4
--- /dev/null
+++ b/static/js/ui.js
@@ -0,0 +1,20 @@
+(function(){
+  const root = document.documentElement;
+  const btn = document.querySelector('[data-theme-toggle]');
+  const stored = localStorage.getItem('theme');
+  if(stored === 'dark'){ root.classList.add('theme-dark'); }
+
+  btn && btn.addEventListener('click', ()=> {
+    root.classList.toggle('theme-dark');
+    const isDark = root.classList.contains('theme-dark');
+    localStorage.setItem('theme', isDark ? 'dark':'light');
+  });
+
+  // activar link actual
+  const links = document.querySelectorAll('.nav-links a');
+  links.forEach(a=>{
+    if(location.pathname.startsWith(a.getAttribute('href'))){
+      a.classList.add('active');
+    }
+  });
+})();
diff --git a/sudoku/__init__.py b/sudoku/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/sudoku/__init__.py
diff --git a/sudoku/apps.py b/sudoku/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..a41236a5c143e5b136a6cfa6a126c8568a746ea7
--- /dev/null
+++ b/sudoku/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class SudokuConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'sudoku'
diff --git a/sudoku/forms.py b/sudoku/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..9ce38a32ab9483f6c404dd30022d8012cd27d632
--- /dev/null
+++ b/sudoku/forms.py
@@ -0,0 +1,31 @@
+from __future__ import annotations
+
+import math
+from django import forms
+
+
+class SudokuForm(forms.Form):
+    TAM_CHOICES = [(n, f"{n}x{n}") for n in (4, 6, 9, 12, 16)]
+    DIF_CHOICES = [
+        ("fácil", "Fácil"),
+        ("medio", "Medio"),
+        ("difícil", "Difícil"),
+        ("experto", "Experto"),
+    ]
+
+    tamaño = forms.TypedChoiceField(choices=TAM_CHOICES, coerce=int, initial=9)
+    dificultad = forms.ChoiceField(choices=DIF_CHOICES, initial="medio")
+    seed = forms.IntegerField(required=False)
+
+    def clean_tamaño(self) -> int:
+        size = self.cleaned_data["tamaño"]
+        root = int(math.sqrt(size))
+        if size % root != 0:
+            raise forms.ValidationError("Tamaño no soportado")
+        return size
+
+    def to_params(self) -> dict:
+        if not self.is_valid():
+            raise ValueError("Formulario no válido")
+        data = self.cleaned_data
+        return {"tamaño": data["tamaño"], "dificultad": data["dificultad"], "seed": data.get("seed")}
diff --git a/sudoku/migrations/__init__.py b/sudoku/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/sudoku/migrations/__init__.py
diff --git a/sudoku/services/__init__.py b/sudoku/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..d083b4ba938838df8a098ad6519bc796670c4a73
--- /dev/null
+++ b/sudoku/services/__init__.py
@@ -0,0 +1 @@
+# Service package for sudoku
diff --git a/sudoku/services/exporter.py b/sudoku/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..cd772a0a7b258206b5625caa47d442eafe2e8709
--- /dev/null
+++ b/sudoku/services/exporter.py
@@ -0,0 +1,69 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+from django.conf import settings
+from django.template.loader import render_to_string
+from PIL import Image, ImageDraw, ImageFont
+from weasyprint import HTML
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+def _ensure_dir(path: Path) -> None:
+    path.parent.mkdir(parents=True, exist_ok=True)
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    grid = juego.resultado.get("grid", [])
+    solution = juego.resultado.get("solution", [])
+    html = render_to_string(
+        "sudoku/export.html", {"jg": juego, "grid": grid, "solution": solution}
+    )
+    pdf_bytes = HTML(string=html).write_pdf()
+    file_path = Path(settings.MEDIA_ROOT) / "exports" / "sudoku" / f"{juego.id}.pdf"
+    _ensure_dir(file_path)
+    file_path.write_bytes(pdf_bytes)
+    Exportacion.objects.create(
+        juego=juego, formato="pdf", archivo=f"exports/sudoku/{juego.id}.pdf"
+    )
+    return file_path
+
+
+def export_to_png(juego: JuegoGenerado, cell: int = 48, margin: int = 20):
+    grid = juego.resultado.get("grid", [])
+    if not grid:
+        raise ValueError("No hay datos de grid para exportar")
+    n = len(grid)
+    width = margin * 2 + cell * n
+    height = margin * 2 + cell * n
+    img = Image.new("RGB", (width, height), "white")
+    draw = ImageDraw.Draw(img)
+    try:
+        font = ImageFont.truetype("DejaVuSansMono.ttf", cell - 10)
+    except OSError:
+        font = ImageFont.load_default()
+
+    for r, row in enumerate(grid):
+        for c, val in enumerate(row):
+            x1 = margin + c * cell
+            y1 = margin + r * cell
+            x2 = x1 + cell
+            y2 = y1 + cell
+            draw.rectangle([x1, y1, x2, y2], outline="black")
+            if val:
+                w, h = draw.textsize(str(val), font=font)
+                draw.text(
+                    (x1 + (cell - w) / 2, y1 + (cell - h) / 2),
+                    str(val),
+                    fill="black",
+                    font=font,
+                )
+
+    file_path = Path(settings.MEDIA_ROOT) / "exports" / "sudoku" / f"{juego.id}.png"
+    _ensure_dir(file_path)
+    img.save(file_path, "PNG")
+    Exportacion.objects.create(
+        juego=juego, formato="png", archivo=f"exports/sudoku/{juego.id}.png"
+    )
+    return file_path
diff --git a/sudoku/services/generator.py b/sudoku/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..8475204d4b144b4b1928e81f28a12ba33f8d515a
--- /dev/null
+++ b/sudoku/services/generator.py
@@ -0,0 +1,72 @@
+from __future__ import annotations
+
+import math
+import random
+from typing import List
+
+
+def generate(params: dict) -> dict:
+    size = params["tamaño"]
+    dificultad = params["dificultad"]
+    seed = params.get("seed")
+    if seed is not None:
+        random.seed(seed)
+    root = int(math.sqrt(size))
+    if size % root != 0:
+        raise ValueError("Tamaño no soportado")
+    block_rows = root
+    block_cols = size // root
+
+    solution = [[0] * size for _ in range(size)]
+    numbers = list(range(1, size + 1))
+
+    def _valid(grid: List[List[int]], r: int, c: int, val: int) -> bool:
+        if val in grid[r]:
+            return False
+        if any(grid[i][c] == val for i in range(size)):
+            return False
+        br = r - r % block_rows
+        bc = c - c % block_cols
+        for i in range(br, br + block_rows):
+            for j in range(bc, bc + block_cols):
+                if grid[i][j] == val:
+                    return False
+        return True
+
+    def _solve(grid: List[List[int]]) -> bool:
+        for i in range(size):
+            for j in range(size):
+                if grid[i][j] == 0:
+                    random.shuffle(numbers)
+                    for val in numbers:
+                        if _valid(grid, i, j, val):
+                            grid[i][j] = val
+                            if _solve(grid):
+                                return True
+                            grid[i][j] = 0
+                    return False
+        return True
+
+    _solve(solution)
+
+    grid = [row[:] for row in solution]
+    diff_map = {
+        "fácil": (0.4, 0.5),
+        "medio": (0.55, 0.65),
+        "difícil": (0.65, 0.75),
+        "experto": (0.75, 0.85),
+    }
+    low, high = diff_map.get(dificultad, (0.55, 0.65))
+    holes = int(size * size * random.uniform(low, high))
+    positions = [(r, c) for r in range(size) for c in range(size)]
+    random.shuffle(positions)
+    for r, c in positions[:holes]:
+        grid[r][c] = 0
+
+    return {
+        "grid": grid,
+        "solution": solution,
+        "tamaño": size,
+        "dificultad": dificultad,
+        "seed": seed,
+    }
diff --git a/sudoku/templates/sudoku/create.html b/sudoku/templates/sudoku/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..3373523140c0dc7ae918d87ebec5ac996808af79
--- /dev/null
+++ b/sudoku/templates/sudoku/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Generar Sudoku · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Sudoku</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/sudoku/templates/sudoku/detail.html b/sudoku/templates/sudoku/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..188518c8a0b07dcb799830126d7c4cdd5aa1f96a
--- /dev/null
+++ b/sudoku/templates/sudoku/detail.html
@@ -0,0 +1,37 @@
+{% extends "base.html" %}
+{% block title %}Sudoku · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Sudoku</div>
+    <div>
+      <a class="btn btn-sm" href="{% url 'sudoku:export' jg.id 'pdf' %}">PDF</a>
+      <a class="btn btn-sm" href="{% url 'sudoku:export' jg.id 'png' %}">PNG</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<div class="sudoku-board" style="grid-template-columns: repeat({{ size }}, 38px);">
+  {% for row in grid %}
+    {% for cell in row %}
+      {% with row_i=forloop.parentloop.counter0 col_i=forloop.counter0 %}
+        {% firstof cell "&nbsp;" as val %}
+        <div class="sudoku-cell
+          {% if row_i|divisibleby:sub_rows %}sudoku-strong-top{% endif %}
+          {% if col_i|divisibleby:sub_cols %} sudoku-strong-left{% endif %}
+          {% if forloop.last and col_i|add:1|divisibleby:sub_cols %} sudoku-strong-right{% endif %}
+          {% if forloop.parentloop.last and row_i|add:1|divisibleby:sub_rows %} sudoku-strong-bottom{% endif %}
+        ">{{ val }}</div>
+      {% endwith %}
+    {% endfor %}
+  {% endfor %}
+</div>
+<form method="post" action="{% url 'sudoku:create' %}">
+  {% csrf_token %}
+  {% for key, val in jg.parametros.items %}
+    <input type="hidden" name="{{ key }}" value="{{ val }}">
+  {% endfor %}
+  <button class="btn btn-primary">Duplicar</button>
+</form>
+{% endblock %}
diff --git a/sudoku/templates/sudoku/export.html b/sudoku/templates/sudoku/export.html
new file mode 100644
index 0000000000000000000000000000000000000000..c225fe5cf7e66a1981e9273472678d1a8939aaa8
--- /dev/null
+++ b/sudoku/templates/sudoku/export.html
@@ -0,0 +1,29 @@
+<!doctype html>
+<html><head>
+  <meta charset="utf-8">
+  <style>
+    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
+    table { border-collapse: collapse; }
+    td { width: 24px; height: 24px; text-align: center; border: 1px solid #222; }
+    .fixed { background:#eee; }
+  </style>
+</head><body>
+  <h2>Sudoku #{{ jg.id }}</h2>
+  <table>
+    {% for row in grid %}
+      <tr>
+        {% for val in row %}
+          {% if val %}<td class="fixed">{{ val }}</td>{% else %}<td>&nbsp;</td>{% endif %}
+        {% endfor %}
+      </tr>
+    {% endfor %}
+  </table>
+  <h3>Solución</h3>
+  <table>
+    {% for row in solution %}
+      <tr>
+        {% for val in row %}<td>{{ val }}</td>{% endfor %}
+      </tr>
+    {% endfor %}
+  </table>
+</body></html>
diff --git a/sudoku/templates/sudoku/index.html b/sudoku/templates/sudoku/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..79a2da952ca7fefb20649da97d72049d08e20a22
--- /dev/null
+++ b/sudoku/templates/sudoku/index.html
@@ -0,0 +1,25 @@
+{% extends "base.html" %}
+{% block title %}Sudokus generados · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Sudokus generados</div>
+    <a class="btn btn-sm btn-primary" href="{% url 'sudoku:create' %}">Nuevo</a>
+  </div>
+{% endblock %}
+
+{% block content %}
+<table class="table">
+  <thead><tr><th>ID</th><th>Tamaño</th><th>Dificultad</th><th>Seed</th><th></th></tr></thead>
+  <tbody>
+  {% for j in juegos %}
+    <tr>
+      <td>{{ j.id }}</td><td>{{ j.parametros.tamaño }}</td><td>{{ j.parametros.dificultad }}</td><td>{{ j.seed }}</td>
+      <td><a class="btn btn-sm" href="{% url 'sudoku:detail' j.id %}">Ver</a></td>
+    </tr>
+  {% empty %}
+    <tr><td colspan="5">No hay sudokus</td></tr>
+  {% endfor %}
+  </tbody>
+</table>
+{% endblock %}
diff --git a/sudoku/urls.py b/sudoku/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..11f167f3c58616c53223534fb067f3f8f4dc8428
--- /dev/null
+++ b/sudoku/urls.py
@@ -0,0 +1,12 @@
+from django.urls import path
+
+from . import views
+
+app_name = "sudoku"
+
+urlpatterns = [
+    path("", views.index, name="index"),
+    path("create/", views.create, name="create"),
+    path("detail/<int:pk>/", views.detail, name="detail"),
+    path("export/<int:pk>/<str:formato>/", views.export, name="export"),
+]
diff --git a/sudoku/views.py b/sudoku/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..6612c3acb043a1d6f85ed70feebfb2f2177c83c7
--- /dev/null
+++ b/sudoku/views.py
@@ -0,0 +1,81 @@
+from __future__ import annotations
+
+import math
+
+from django.contrib.auth.decorators import login_required
+from django.http import FileResponse, HttpResponseBadRequest
+from django.shortcuts import get_object_or_404, redirect, render
+
+from core.auth import require_group
+from puzzles.models import JuegoGenerado
+
+from .forms import SudokuForm
+from .services import exporter, generator
+
+
+@require_group("generador")
+def create(request):
+    if request.method == "POST":
+        form = SudokuForm(request.POST)
+        if form.is_valid():
+            params = form.to_params()
+            resultado = generator.generate(params)
+            jg = JuegoGenerado.objects.create(
+                tipo="sudoku",
+                parametros=params,
+                resultado=resultado,
+                seed=params.get("seed") or 0,
+                creado_por=request.user if request.user.is_authenticated else None,
+            )
+            return redirect("sudoku:detail", pk=jg.pk)
+    else:
+        form = SudokuForm()
+    return render(request, "sudoku/create.html", {"form": form})
+
+
+@login_required
+def detail(request, pk: int):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="sudoku")
+    size = jg.resultado.get("tamaño")
+    sub = int(math.sqrt(size))
+    grid = jg.resultado.get("grid")
+    return render(
+        request,
+        "sudoku/detail.html",
+        {
+            "jg": jg,
+            "grid": grid,
+            "solution": jg.resultado.get("solution"),
+            "size": size,
+            "sub_rows": sub,
+            "sub_cols": size // sub,
+        },
+    )
+
+
+@login_required
+def index(request):
+    juegos = JuegoGenerado.objects.filter(tipo="sudoku").order_by("-created_at")
+    return render(request, "sudoku/index.html", {"juegos": juegos})
+
+
+@login_required
+def export(request, pk: int, formato: str):
+    jg = get_object_or_404(JuegoGenerado, pk=pk, tipo="sudoku")
+    if formato == "pdf":
+        path = exporter.export_to_pdf(jg)
+        return FileResponse(
+            open(path, "rb"),
+            content_type="application/pdf",
+            as_attachment=True,
+            filename=f"sudoku_{jg.id}.pdf",
+        )
+    if formato == "png":
+        path = exporter.export_to_png(jg)
+        return FileResponse(
+            open(path, "rb"),
+            content_type="image/png",
+            as_attachment=True,
+            filename=f"sudoku_{jg.id}.png",
+        )
+    return HttpResponseBadRequest("Formato no soportado")
diff --git a/templates/403.html b/templates/403.html
new file mode 100644
index 0000000000000000000000000000000000000000..de6f4a9915031983b231b6bebe362bfb8ad1176e
--- /dev/null
+++ b/templates/403.html
@@ -0,0 +1,9 @@
+{% extends 'base.html' %}
+{% block title %}Acceso denegado{% endblock %}
+{% block header %}
+  <div class="card-header"><div class="card-title">403</div></div>
+{% endblock %}
+{% block content %}
+<p>No tienes permisos para acceder a esta página.</p>
+<p><a class="btn btn-primary" href="{% url 'login' %}">Iniciar sesión</a></p>
+{% endblock %}
diff --git a/templates/_tabs.html b/templates/_tabs.html
new file mode 100644
index 0000000000000000000000000000000000000000..8d2587ac573fc28248ce39fd37b885b77092777d
--- /dev/null
+++ b/templates/_tabs.html
@@ -0,0 +1,5 @@
+<div class="tabs">
+  {% for t in tabs %}
+    <a href="{{ t.href }}" class="tab {% if t.active %}active{% endif %}">{{ t.label }}</a>
+  {% endfor %}
+</div>
diff --git a/templates/base.html b/templates/base.html
new file mode 100644
index 0000000000000000000000000000000000000000..8783a3d2431e2afdc287600e522fc896f316caa8
--- /dev/null
+++ b/templates/base.html
@@ -0,0 +1,67 @@
+{% load static %}
+<!doctype html>
+<html lang="es">
+<head>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <title>{% block title %}Juegos{% endblock %}</title>
+  <link rel="stylesheet" href="{% static 'css/theme.css' %}">
+  {% block extra_css %}{% endblock %}
+</head>
+<body>
+  <nav class="navbar">
+    <div class="navbar-inner">
+      <div class="brand">Juegos</div>
+      <div class="nav-links">
+        <a href="{% url 'home' %}">Inicio</a>
+        <a href="{% url 'wordsearch:create' %}">Sopa de letras</a>
+        <a href="{% url 'crossword:create' %}">Crucigrama</a>
+        <a href="{% url 'sudoku:index' %}">Sudoku</a>
+        <a href="{% url 'coloring:create' %}">Dibujos</a>
+        <a href="{% url 'calligraphy:create' %}">Caligrafía</a>
+        <a href="{% url 'mandala:create' %}">Mandala</a>
+        <a href="{% url 'maze:create' %}">Laberintos</a>
+        <a href="{% url 'lexicon:index' %}">Léxico</a>
+      </div>
+      <div class="theme-toggle">
+        <button class="btn btn-sm" data-theme-toggle>🌗 Tema</button>
+        {% if user.is_authenticated %}
+          <span style="color:var(--muted)">Hola, {{ user.username }}</span>
+          <a class="btn btn-sm btn-ghost" href="{% url 'logout' %}">Cerrar sesión</a>
+        {% else %}
+          <a class="btn btn-sm btn-primary" href="{% url 'login' %}">Iniciar sesión</a>
+        {% endif %}
+      </div>
+    </div>
+  </nav>
+
+  <main class="container">
+    {% if messages %}
+      <div class="card">
+        {% for message in messages %}
+          <div class="alert alert-{{ message.tags }}">{{ message }}</div>
+        {% endfor %}
+      </div>
+    {% endif %}
+
+    {% block header %}
+      <!-- Bloque opcional de cabecera por vista -->
+    {% endblock %}
+
+    {% block tabs %}
+      <!-- Si una vista tiene pestañas, declararlas aquí con .tabs y .tab -->
+    {% endblock %}
+
+    <section class="card">
+      {% block content %}{% endblock %}
+    </section>
+
+    {% block footer %}
+      <div class="footer">© {{ now|date:"Y" }} · Repositorio</div>
+    {% endblock %}
+  </main>
+
+  <script src="{% static 'js/ui.js' %}"></script>
+  {% block extra_js %}{% endblock %}
+</body>
+</html>
diff --git a/templates/registration/login.html b/templates/registration/login.html
new file mode 100644
index 0000000000000000000000000000000000000000..ed892ca7ae3f957656e89330216ddc7df4780eec
--- /dev/null
+++ b/templates/registration/login.html
@@ -0,0 +1,18 @@
+{% extends 'base.html' %}
+{% block title %}Login{% endblock %}
+{% block header %}
+  <div class="card-header"><div class="card-title">Iniciar sesión</div></div>
+{% endblock %}
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Entrar</button>
+</form>
+{% endblock %}
diff --git a/test_codex.txt b/test_codex.txt
new file mode 100644
index 0000000000000000000000000000000000000000..d86bac9de59abcc26bc7956c1e842237c7581859
--- /dev/null
+++ b/test_codex.txt
@@ -0,0 +1 @@
+OK
diff --git a/tests/auth/test_access.py b/tests/auth/test_access.py
new file mode 100644
index 0000000000000000000000000000000000000000..e86538ffce98b0a10c7e22c71445fd0064c7067f
--- /dev/null
+++ b/tests/auth/test_access.py
@@ -0,0 +1,81 @@
+import pytest
+from django.contrib.auth import get_user_model
+from django.contrib.auth.models import Group
+from django.urls import reverse
+
+from lexicon.models import Idioma, Categoria, Palabra
+
+
+@pytest.fixture
+def setup_groups(db):
+    for name in ["editor_contenidos", "generador", "visor"]:
+        Group.objects.get_or_create(name=name)
+
+
+@pytest.fixture
+def editor(db, setup_groups):
+    User = get_user_model()
+    user = User.objects.create_user("editor", password="pass")
+    user.groups.add(Group.objects.get(name="editor_contenidos"))
+    return user
+
+
+@pytest.fixture
+def maker(db, setup_groups):
+    User = get_user_model()
+    user = User.objects.create_user("maker", password="pass")
+    user.groups.add(Group.objects.get(name="generador"))
+    return user
+
+
+@pytest.fixture
+def viewer(db, setup_groups):
+    User = get_user_model()
+    user = User.objects.create_user("viewer", password="pass")
+    user.groups.add(Group.objects.get(name="visor"))
+    return user
+
+
+@pytest.fixture
+def lexicon_data(db):
+    es = Idioma.objects.create(code="es", nombre="Español")
+    cat = Categoria.objects.create(nombre="animales", slug="animales", tipo_contenido="wordsearch")
+    for t in ["gato", "perro", "oso"]:
+        p = Palabra.objects.create(texto=t, idioma=es)
+        p.categorias.add(cat)
+    return es, cat
+
+
+def test_viewer_cannot_import(client, viewer, lexicon_data):
+    client.force_login(viewer)
+    resp = client.get(reverse("lexicon:import_csv"))
+    assert resp.status_code == 403
+
+
+def test_maker_can_post_wordsearch(client, maker, lexicon_data):
+    client.force_login(maker)
+    data = {
+        "idioma": "es",
+        "ancho": 5,
+        "alto": 5,
+        "num_palabras": 3,
+        "permitir_diagonales": "on",
+        "permitir_invertidas": "on",
+        "caracteres_relleno": "ABC",
+        "dificultad_min": 1,
+        "dificultad_max": 5,
+    }
+    resp = client.post(reverse("wordsearch:create"), data)
+    assert resp.status_code in (302, 200)
+
+
+def test_editor_can_access_categoria_create(client, editor):
+    client.force_login(editor)
+    resp = client.get(reverse("lexicon:categoria_create"))
+    assert resp.status_code == 200
+
+
+def test_anon_redirects_to_login(client):
+    resp = client.get(reverse("lexicon:categoria_create"))
+    assert resp.status_code == 302
+    assert "/accounts/login/" in resp.headers.get("Location", "")
diff --git a/tests/integration/test_end_to_end.py b/tests/integration/test_end_to_end.py
new file mode 100644
index 0000000000000000000000000000000000000000..d1ab91c5db4d8dde0ced9732ef3041f7fb669d72
--- /dev/null
+++ b/tests/integration/test_end_to_end.py
@@ -0,0 +1,55 @@
+import pytest
+from django.contrib.auth.models import Group, User
+from django.urls import reverse
+
+from lexicon.models import Idioma, Palabra
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+@pytest.mark.django_db
+def test_wordsearch_end_to_end(client):
+    lang = Idioma.objects.create(code="es", nombre="Español")
+    words = [
+        "uno",
+        "dos",
+        "tres",
+        "cuatro",
+        "cinco",
+        "seis",
+        "siete",
+        "ocho",
+        "nueve",
+        "diez",
+    ]
+    for w in words:
+        Palabra.objects.create(texto=w, idioma=lang)
+
+    group = Group.objects.create(name="generador")
+    user = User.objects.create_user(username="maker", password="maker123")
+    user.groups.add(group)
+    client.force_login(user)
+
+    data = {
+        "idioma": "es",
+        "ancho": 10,
+        "alto": 10,
+        "num_palabras": 5,
+        "permitir_diagonales": True,
+        "permitir_invertidas": True,
+        "caracteres_relleno": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
+        "dificultad_min": 1,
+        "dificultad_max": 5,
+    }
+
+    resp = client.post(reverse("wordsearch:create"), data)
+    assert resp.status_code == 302
+    jg = JuegoGenerado.objects.latest("id")
+    detail = client.get(resp.headers["Location"])
+    assert b"Palabras a buscar" in detail.content
+    grid = jg.resultado["grid"]
+    assert len(grid) == 10
+    assert all(len(row) == 10 for row in grid)
+
+    client.get(reverse("wordsearch:export", args=[jg.id, "pdf"]))
+    client.get(reverse("wordsearch:export", args=[jg.id, "png"]))
+    assert Exportacion.objects.filter(juego=jg).count() == 2
diff --git a/tests/test_mandala_generator.py b/tests/test_mandala_generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..d8d09e32a34a7f413eb60905078c21fe3a24f964
--- /dev/null
+++ b/tests/test_mandala_generator.py
@@ -0,0 +1,25 @@
+from pathlib import Path
+
+from mandala.services.generator import (
+    MandalaParams,
+    generate_mandala_svg,
+    svg_to_pdf,
+    svg_to_png,
+)
+
+
+def test_generate_svg():
+    p = MandalaParams(symmetry=8, rings=6, complexity=5, seed=42)
+    svg = generate_mandala_svg(p)
+    assert svg.startswith("<svg")
+
+
+def test_export_png_pdf(tmp_path: Path):
+    p = MandalaParams(symmetry=6, rings=5, complexity=4, seed=1)
+    svg = generate_mandala_svg(p)
+    png_path = tmp_path / "out.png"
+    pdf_path = tmp_path / "out.pdf"
+    svg_to_png(svg, png_path)
+    svg_to_pdf(svg, pdf_path)
+    assert png_path.exists()
+    assert pdf_path.exists()
diff --git a/tests_integration/test_commands.py b/tests_integration/test_commands.py
new file mode 100644
index 0000000000000000000000000000000000000000..8b2c624a4e46bda451aa3017cfaafd3df8d0a32b
--- /dev/null
+++ b/tests_integration/test_commands.py
@@ -0,0 +1,21 @@
+from pathlib import Path
+
+import pytest
+from django.core.management import call_command
+
+from lexicon.models import Word
+
+
+@pytest.mark.django_db
+def test_check_and_import_words(settings):
+    call_command("check")
+
+    dataset_dir = Path(__file__).resolve().parent.parent / "lexicon" / "datasets"
+    expected = sum(
+        sum(1 for _ in f.open()) - 1 for f in dataset_dir.glob("*_sample.csv")
+    )
+
+    call_command("import_words")
+    assert Word.objects.count() == expected
+    call_command("import_words")
+    assert Word.objects.count() == expected
diff --git a/tests_integration/test_endpoints.py b/tests_integration/test_endpoints.py
new file mode 100644
index 0000000000000000000000000000000000000000..556042757efcf212a6500741a6ba6d4a958b2ef4
--- /dev/null
+++ b/tests_integration/test_endpoints.py
@@ -0,0 +1,32 @@
+import pytest
+from django.contrib.auth.models import Group, User
+
+
+@pytest.mark.django_db
+def test_main_endpoints(client):
+    generador = Group.objects.create(name="generador")
+    user = User.objects.create_user("tester", password="pass")
+    user.groups.add(generador)
+    client.force_login(user)
+
+    urls = [
+        "/",
+        "/lexicon/",
+        "/puzzles/",
+        "/wordsearch/",
+        "/crossword/",
+        "/sudoku/",
+        "/coloring/",
+        "/calligraphy/",
+        "/mandala/",
+    ]
+    for url in urls:
+        resp = client.get(url)
+        assert resp.status_code == 200, url
+
+    home = client.get("/")
+    assert "Sopa de letras" in home.content.decode()
+    assert "Crucigrama" in home.content.decode()
+
+    coloring = client.get("/coloring/")
+    assert "static" in coloring.content.decode()
diff --git a/tests_integration/test_puzzles.py b/tests_integration/test_puzzles.py
new file mode 100644
index 0000000000000000000000000000000000000000..a4acae768fbd64cdab61051d18690e6ce07c6275
--- /dev/null
+++ b/tests_integration/test_puzzles.py
@@ -0,0 +1,72 @@
+import pytest
+from django.contrib.auth.models import Group, User
+from django.urls import reverse
+
+from lexicon.models import Idioma, Palabra
+
+
+@pytest.fixture
+def generador_user(db):
+    group = Group.objects.create(name="generador")
+    user = User.objects.create_user(username="maker", password="maker123")
+    user.groups.add(group)
+    return user
+
+
+@pytest.fixture
+def lexicon_words(db):
+    lang = Idioma.objects.create(code="es", nombre="Español")
+    words = [
+        "uno",
+        "dos",
+        "tres",
+        "cuatro",
+        "cinco",
+        "seis",
+        "siete",
+        "ocho",
+        "nueve",
+        "diez",
+    ]
+    for w in words:
+        Palabra.objects.create(texto=w, idioma=lang)
+    return lang
+
+
+@pytest.mark.django_db
+def test_generate_puzzles(client, generador_user, lexicon_words):
+    client.force_login(generador_user)
+
+    ws_data = {
+        "idioma": "es",
+        "ancho": 8,
+        "alto": 8,
+        "num_palabras": 5,
+        "permitir_diagonales": True,
+        "permitir_invertidas": True,
+        "caracteres_relleno": "ABCDEFGHIJKLMN",
+        "dificultad_min": 1,
+        "dificultad_max": 5,
+    }
+    resp = client.post(reverse("wordsearch:create"), ws_data)
+    assert resp.status_code == 302
+    detail = client.get(resp.headers["Location"])
+    assert "Palabras a buscar" in detail.content.decode()
+
+    cw_data = {
+        "idioma": "es",
+        "ancho": 8,
+        "alto": 8,
+        "num_palabras": 5,
+        "dificultad_min": 1,
+        "dificultad_max": 5,
+    }
+    resp = client.post(reverse("crossword:create"), cw_data)
+    assert resp.status_code == 302
+    detail = client.get(resp.headers["Location"])
+    assert "Definiciones" in detail.content.decode()
+
+    resp = client.post(reverse("sudoku:create"), {"tamaño": 9, "dificultad": "fácil"})
+    assert resp.status_code == 302
+    detail = client.get(resp.headers["Location"])
+    assert "Sudoku" in detail.content.decode()
diff --git a/tests_integration/test_regresion.py b/tests_integration/test_regresion.py
new file mode 100644
index 0000000000000000000000000000000000000000..521def32885a74744769502225a39e4fbbe180f4
--- /dev/null
+++ b/tests_integration/test_regresion.py
@@ -0,0 +1,40 @@
+import pytest
+from django.contrib.auth.models import Group, User
+from django.db import IntegrityError
+
+from lexicon.models import Idioma, Palabra
+from sudoku.forms import SudokuForm
+
+
+@pytest.mark.django_db
+def test_no_duplicate_words():
+    lang = Idioma.objects.create(code="es", nombre="Español")
+    Palabra.objects.create(texto="hola", idioma=lang)
+    with pytest.raises(IntegrityError):
+        Palabra.objects.create(texto="hola", idioma=lang)
+
+
+@pytest.mark.django_db
+def test_sudoku_form_sizes():
+    assert SudokuForm({"tamaño": 9, "dificultad": "fácil"}).is_valid()
+    assert not SudokuForm({"tamaño": 10, "dificultad": "fácil"}).is_valid()
+
+
+@pytest.mark.django_db
+def test_base_template_used(client):
+    generador = Group.objects.create(name="generador")
+    user = User.objects.create_user("tester", password="pass")
+    user.groups.add(generador)
+    client.force_login(user)
+    urls = [
+        "/wordsearch/",
+        "/crossword/",
+        "/sudoku/",
+        "/coloring/",
+        "/calligraphy/",
+        "/mandala/",
+        "/lexicon/",
+    ]
+    for url in urls:
+        resp = client.get(url)
+        assert any(t.name == "base.html" for t in resp.templates), url
diff --git a/wordsearch/__init__.py b/wordsearch/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/wordsearch/__init__.py
diff --git a/wordsearch/apps.py b/wordsearch/apps.py
new file mode 100644
index 0000000000000000000000000000000000000000..cd260599a9e995cd505b1878ef0e2216cd0e0097
--- /dev/null
+++ b/wordsearch/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class WordsearchConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'wordsearch'
diff --git a/wordsearch/forms.py b/wordsearch/forms.py
new file mode 100644
index 0000000000000000000000000000000000000000..702fa74a3edad435fffdbd009452f0fa04d262f8
--- /dev/null
+++ b/wordsearch/forms.py
@@ -0,0 +1,58 @@
+from django import forms
+
+from lexicon.models import Categoria, Idioma
+
+
+class WordsearchForm(forms.Form):
+    idioma = forms.ModelChoiceField(queryset=Idioma.objects.all())
+    categorias = forms.ModelMultipleChoiceField(
+        queryset=Categoria.objects.all(), required=False
+    )
+    ancho = forms.IntegerField(min_value=5, max_value=30, initial=12)
+    alto = forms.IntegerField(min_value=5, max_value=30, initial=12)
+    num_palabras = forms.IntegerField(min_value=3, max_value=100, initial=15)
+    permitir_diagonales = forms.BooleanField(required=False, initial=True)
+    permitir_invertidas = forms.BooleanField(required=False, initial=True)
+    caracteres_relleno = forms.CharField(initial="ABCDEFGHIJKLMNOPQRSTUVWXYZ")
+    dificultad_min = forms.IntegerField(min_value=1, max_value=5, initial=1)
+    dificultad_max = forms.IntegerField(min_value=1, max_value=5, initial=5)
+    seed = forms.IntegerField(required=False)
+
+    def clean(self):
+        cleaned = super().clean()
+        ancho = cleaned.get('ancho') or 0
+        alto = cleaned.get('alto') or 0
+        num_palabras = cleaned.get('num_palabras') or 0
+        if num_palabras > (ancho * alto) // 3:
+            self.add_error(
+                'num_palabras', 'Demasiadas palabras para el tamaño del tablero.'
+            )
+        min_d = cleaned.get('dificultad_min')
+        max_d = cleaned.get('dificultad_max')
+        if min_d is not None and max_d is not None and min_d > max_d:
+            self.add_error(
+                'dificultad_max',
+                'La dificultad máxima debe ser mayor o igual a la mínima.',
+            )
+        return cleaned
+
+    def to_params(self):
+        data = self.cleaned_data
+        categorias = (
+            [c.id for c in data['categorias']]
+            if data['categorias']
+            else list(Categoria.objects.values_list('id', flat=True))
+        )
+        return {
+            'idioma': data['idioma'].code,
+            'categorias': categorias,
+            'ancho': data['ancho'],
+            'alto': data['alto'],
+            'num_palabras': data['num_palabras'],
+            'permitir_diagonales': data['permitir_diagonales'],
+            'permitir_invertidas': data['permitir_invertidas'],
+            'caracteres_relleno': data['caracteres_relleno'],
+            'dificultad_min': data['dificultad_min'],
+            'dificultad_max': data['dificultad_max'],
+            'seed': data['seed'],
+        }
diff --git a/wordsearch/migrations/__init__.py b/wordsearch/migrations/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
--- /dev/null
+++ b/wordsearch/migrations/__init__.py
diff --git a/wordsearch/services/__init__.py b/wordsearch/services/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..d2ff26e44337953344febe3f28b93e27269af280
--- /dev/null
+++ b/wordsearch/services/__init__.py
@@ -0,0 +1 @@
+# Service package for wordsearch
diff --git a/wordsearch/services/exporter.py b/wordsearch/services/exporter.py
new file mode 100644
index 0000000000000000000000000000000000000000..aae39670713f93961fd848c7791f8b4b03952230
--- /dev/null
+++ b/wordsearch/services/exporter.py
@@ -0,0 +1,57 @@
+from __future__ import annotations
+
+from pathlib import Path
+
+from django.conf import settings
+from django.template.loader import render_to_string
+from PIL import Image, ImageDraw, ImageFont
+from weasyprint import HTML
+
+from puzzles.models import Exportacion, JuegoGenerado
+
+
+def export_to_pdf(juego: JuegoGenerado):
+    """Render the puzzle to PDF and store it under MEDIA_ROOT/exports/wordsearch."""
+    html = render_to_string("wordsearch/export.html", {"juego": juego})
+    pdf_bytes = HTML(string=html).write_pdf()
+
+    base_path = Path(settings.MEDIA_ROOT) / "exports" / "wordsearch"
+    base_path.mkdir(parents=True, exist_ok=True)
+    file_path = base_path / f"{juego.id}.pdf"
+    file_path.write_bytes(pdf_bytes)
+
+    Exportacion.objects.create(
+        juego=juego, formato="pdf", archivo=f"exports/wordsearch/{juego.id}.pdf"
+    )
+    return file_path
+
+
+def export_to_png(juego: JuegoGenerado, cell_size: int = 40):
+    """Render the puzzle grid as a PNG image."""
+    grid = juego.resultado["grid"]
+    ancho = len(grid[0])
+    alto = len(grid)
+    img = Image.new("RGB", (ancho * cell_size, alto * cell_size), "white")
+    draw = ImageDraw.Draw(img)
+    try:
+        font = ImageFont.truetype("DejaVuSansMono.ttf", cell_size - 10)
+    except OSError:
+        font = ImageFont.load_default()
+
+    for y, row in enumerate(grid):
+        for x, ch in enumerate(row):
+            bbox = draw.textbbox((0, 0), ch, font=font)
+            w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
+            tx = x * cell_size + (cell_size - w) / 2
+            ty = y * cell_size + (cell_size - h) / 2
+            draw.text((tx, ty), ch, fill="black", font=font)
+
+    base_path = Path(settings.MEDIA_ROOT) / "exports" / "wordsearch"
+    base_path.mkdir(parents=True, exist_ok=True)
+    file_path = base_path / f"{juego.id}.png"
+    img.save(file_path, "PNG")
+
+    Exportacion.objects.create(
+        juego=juego, formato="png", archivo=f"exports/wordsearch/{juego.id}.png"
+    )
+    return file_path
diff --git a/wordsearch/services/generator.py b/wordsearch/services/generator.py
new file mode 100644
index 0000000000000000000000000000000000000000..e4cb75ae08955fccf42e8d96a3c2f96baf7c1c50
--- /dev/null
+++ b/wordsearch/services/generator.py
@@ -0,0 +1,108 @@
+import random
+import unicodedata
+
+
+def _normalize(word: str) -> str:
+    nfkd = unicodedata.normalize('NFKD', word)
+    only_ascii = nfkd.encode('ascii', 'ignore').decode('ascii')
+    letters = [c for c in only_ascii if c.isalpha()]
+    return ''.join(letters).upper()
+
+
+def _try_place(grid, word, x, y, dx, dy):
+    width = len(grid[0])
+    height = len(grid)
+    for i, ch in enumerate(word):
+        xi = x + dx * i
+        yi = y + dy * i
+        if xi < 0 or yi < 0 or xi >= width or yi >= height:
+            return False
+        cell = grid[yi][xi]
+        if cell is not None and cell != ch:
+            return False
+    for i, ch in enumerate(word):
+        xi = x + dx * i
+        yi = y + dy * i
+        grid[yi][xi] = ch
+    return True
+
+
+def generate(params: dict, palabras: list[str]) -> dict:
+    width = params['ancho']
+    height = params['alto']
+    seed = params.get('seed')
+    rng = random.Random(seed)
+    max_len = max(width, height)
+
+    candidates = []
+    for w in palabras:
+        nw = _normalize(w)
+        if nw and len(nw) <= max_len:
+            candidates.append(nw)
+    if len(candidates) < params['num_palabras']:
+        raise ValueError('No hay suficientes palabras para generar la sopa')
+    rng.shuffle(candidates)
+
+    grid = [[None for _ in range(width)] for _ in range(height)]
+    soluciones = []
+    used = []
+
+    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
+    if params['permitir_diagonales']:
+        directions += [(-1, -1), (-1, 1), (1, -1), (1, 1)]
+    if not params['permitir_invertidas']:
+        directions = [d for d in directions if d[0] >= 0 and d[1] >= 0]
+
+    for word in candidates:
+        if len(used) >= params['num_palabras']:
+            break
+        placed = False
+        for _ in range(200):
+            dx, dy = rng.choice(directions)
+            if dx == 0:
+                xs = list(range(0, width))
+            elif dx > 0:
+                xs = list(range(0, width - len(word) + 1))
+            else:
+                xs = list(range(len(word) - 1, width))
+            if dy == 0:
+                ys = list(range(0, height))
+            elif dy > 0:
+                ys = list(range(0, height - len(word) + 1))
+            else:
+                ys = list(range(len(word) - 1, height))
+            if not xs or not ys:
+                continue
+            x = rng.choice(xs)
+            y = rng.choice(ys)
+            if _try_place(grid, word, x, y, dx, dy):
+                soluciones.append({
+                    'palabra': word,
+                    'fila_inicio': y,
+                    'col_inicio': x,
+                    'dx': dx,
+                    'dy': dy,
+                    'longitud': len(word),
+                })
+                used.append(word)
+                placed = True
+                break
+        if not placed:
+            continue
+    if len(used) < params['num_palabras']:
+        raise ValueError('No se pudieron colocar todas las palabras')
+
+    fill_chars = params['caracteres_relleno']
+    for y in range(height):
+        for x in range(width):
+            if grid[y][x] is None:
+                grid[y][x] = rng.choice(fill_chars)
+    grid_strings = [''.join(row) for row in grid]
+    return {
+        'grid': grid_strings,
+        'soluciones': soluciones,
+        'palabras': used,
+        'ancho': width,
+        'alto': height,
+        'seed': seed,
+    }
diff --git a/wordsearch/services/repository.py b/wordsearch/services/repository.py
new file mode 100644
index 0000000000000000000000000000000000000000..2298d2b1db10cdc82a0194f8084df5a43280d406
--- /dev/null
+++ b/wordsearch/services/repository.py
@@ -0,0 +1,13 @@
+from lexicon.models import Palabra
+
+
+def fetch_palabras(idioma_code, categorias_ids, dificultad_min, dificultad_max, limit):
+    qs = Palabra.objects.filter(
+        idioma_id=idioma_code,
+        dificultad__gte=dificultad_min,
+        dificultad__lte=dificultad_max,
+    )
+    if categorias_ids:
+        qs = qs.filter(categorias__in=categorias_ids).distinct()
+    qs = qs.values_list("texto", flat=True)[: limit * 3]
+    return list(qs)
diff --git a/wordsearch/templates/wordsearch/create.html b/wordsearch/templates/wordsearch/create.html
new file mode 100644
index 0000000000000000000000000000000000000000..ad0168c66ecd4abaa03f3c32e717bfda38de1450
--- /dev/null
+++ b/wordsearch/templates/wordsearch/create.html
@@ -0,0 +1,22 @@
+{% extends "base.html" %}
+{% block title %}Generar Sopa de Letras · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Sopa de letras</div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<form method="post">
+  {% csrf_token %}
+  {% for field in form %}
+  <div class="field">
+    {{ field.label_tag }}
+    {{ field }}
+    {% for error in field.errors %}<div class="alert alert-error">{{ error }}</div>{% endfor %}
+  </div>
+  {% endfor %}
+  <button class="btn btn-primary" type="submit">Generar</button>
+</form>
+{% endblock %}
diff --git a/wordsearch/templates/wordsearch/detail.html b/wordsearch/templates/wordsearch/detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..5ea4b5db347ca7c1a6644c12c865948cf071e02a
--- /dev/null
+++ b/wordsearch/templates/wordsearch/detail.html
@@ -0,0 +1,45 @@
+{% extends "base.html" %}
+{% block title %}Sopa de Letras · Juegos{% endblock %}
+
+{% block header %}
+  <div class="card-header">
+    <div class="card-title">Sopa de letras</div>
+    <div>
+      <a href="{% url 'wordsearch:export' juego.id 'pdf' %}" class="btn btn-sm">PDF</a>
+      <a href="{% url 'wordsearch:export' juego.id 'png' %}" class="btn btn-sm">PNG</a>
+    </div>
+  </div>
+{% endblock %}
+
+{% block content %}
+<p><strong>Tamaño:</strong> {{ juego.resultado.ancho }} × {{ juego.resultado.alto }} | <strong>Seed:</strong> {{ juego.resultado.seed }}</p>
+<pre>
+{% for row in juego.resultado.grid %}{{ row }}
+{% endfor %}
+</pre>
+<div class="card">
+  <div class="card-header">
+    <div class="card-title">Palabras a buscar ({{ palabras|length }})</div>
+  </div>
+  <ul>
+    {% for w in palabras %}
+      <li>{{ w }}</li>
+    {% empty %}
+      <li>No hay palabras.</li>
+    {% endfor %}
+  </ul>
+</div>
+<form method="post" action="{% url 'wordsearch:create' %}">
+  {% csrf_token %}
+  {% for key, val in juego.parametros.items %}
+    {% if key == 'categorias' %}
+      {% for c in val %}
+        <input type="hidden" name="categorias" value="{{ c }}">
+      {% endfor %}
+    {% else %}
+      <input type="hidden" name="{{ key }}" value="{{ val }}">
+    {% endif %}
+  {% endfor %}
+  <button class="btn btn-primary">Duplicar</button>
+</form>
+{% endblock %}
diff --git a/wordsearch/templates/wordsearch/export.html b/wordsearch/templates/wordsearch/export.html
new file mode 100644
index 0000000000000000000000000000000000000000..32cac1bd48e763fd4104eabfd74271bd0b5b60fe
--- /dev/null
+++ b/wordsearch/templates/wordsearch/export.html
@@ -0,0 +1,26 @@
+<!doctype html>
+<html lang="es">
+<head>
+  <meta charset="utf-8">
+  <style>
+    table { border-collapse: collapse; font-family: monospace; }
+    td { border: 1px solid #000; width: 20px; height: 20px; text-align: center; }
+  </style>
+</head>
+<body>
+  <h3>Sopa de Letras</h3>
+  <table>
+    {% for row in juego.resultado.grid %}
+    <tr>
+      {% for ch in row %}<td>{{ ch }}</td>{% endfor %}
+    </tr>
+    {% endfor %}
+  </table>
+  <h4>Palabras</h4>
+  <ul>
+    {% for p in juego.resultado.palabras %}
+    <li>{{ p }}</li>
+    {% endfor %}
+  </ul>
+</body>
+</html>
diff --git a/wordsearch/urls.py b/wordsearch/urls.py
new file mode 100644
index 0000000000000000000000000000000000000000..76c21184dc17e0f3c90173f2f4bc3da7498d3416
--- /dev/null
+++ b/wordsearch/urls.py
@@ -0,0 +1,10 @@
+from django.urls import path
+from . import views
+
+app_name = 'wordsearch'
+
+urlpatterns = [
+    path('', views.create, name='create'),
+    path('detail/<int:pk>/', views.detail, name='detail'),
+    path('export/<int:pk>/<str:formato>/', views.export, name='export'),
+]
diff --git a/wordsearch/views.py b/wordsearch/views.py
new file mode 100644
index 0000000000000000000000000000000000000000..f662f35c2241d0064eb28544d996924d4421e0b0
--- /dev/null
+++ b/wordsearch/views.py
@@ -0,0 +1,74 @@
+import random
+
+from django.contrib.auth.decorators import login_required
+from django.http import FileResponse, Http404
+from django.shortcuts import get_object_or_404, redirect, render
+
+from core.auth import require_group
+from puzzles.models import JuegoGenerado
+
+from .forms import WordsearchForm
+from .services import exporter, generator, repository
+
+
+@require_group("generador")
+def create(request):
+    if request.method == 'POST':
+        form = WordsearchForm(request.POST)
+        if form.is_valid():
+            params = form.to_params()
+            if not params.get('seed'):
+                params['seed'] = random.randint(0, 999999)
+            palabras = repository.fetch_palabras(
+                params['idioma'],
+                params['categorias'],
+                params['dificultad_min'],
+                params['dificultad_max'],
+                params['num_palabras'],
+            )
+            try:
+                resultado = generator.generate(params, palabras)
+            except ValueError as e:
+                form.add_error(None, str(e))
+            else:
+                juego = JuegoGenerado.objects.create(
+                    tipo='wordsearch',
+                    parametros=params,
+                    resultado=resultado,
+                    seed=params['seed'],
+                    creado_por=request.user if request.user.is_authenticated else None,
+                )
+                return redirect('wordsearch:detail', pk=juego.pk)
+    else:
+        form = WordsearchForm()
+    return render(request, 'wordsearch/create.html', {'form': form})
+
+
+@login_required
+def detail(request, pk):
+    juego = get_object_or_404(JuegoGenerado, pk=pk, tipo='wordsearch')
+    palabras = juego.resultado.get('palabras', [])
+    return render(
+        request, 'wordsearch/detail.html', {'juego': juego, 'palabras': palabras}
+    )
+
+
+@login_required
+def export(request, pk, formato):
+    juego = get_object_or_404(JuegoGenerado, pk=pk, tipo='wordsearch')
+    if formato == 'pdf':
+        file_path = exporter.export_to_pdf(juego)
+        filename = f"wordsearch_{juego.id}.pdf"
+        content_type = 'application/pdf'
+    elif formato == 'png':
+        file_path = exporter.export_to_png(juego)
+        filename = f"wordsearch_{juego.id}.png"
+        content_type = 'image/png'
+    else:
+        raise Http404
+    return FileResponse(
+        open(file_path, 'rb'),
+        as_attachment=True,
+        filename=filename,
+        content_type=content_type,
+    )
 
EOF
)